vim.g.colors_name = "everforest"

-- stylua: ignore start
local palette = {
  bg_dim      = "#293136",
  bg0         = "#333c43",
  bg1         = "#3a464c",
  bg2         = "#434f55",
  bg3         = "#4d5960",
  bg4         = "#555f66",
  bg5         = "#5d6b66",
  bg_visual   = "#4c3743",
  bg_red      = "#59464c",
  bg_green    = "#48584e",
  bg_blue     = "#3f5865",
  bg_yellow   = "#55544a",

  fg          = "#d3c6aa",
  red         = "#e67e80",
  orange      = "#e69875",
  yellow      = "#dbbc7f",
  green       = "#a7c080",
  aqua        = "#83c092",
  blue        = "#7fbbb3",
  purple      = "#d699b6",
  grey0       = "#7a8478",
  grey1       = "#859289",
  grey2       = "#9da9a0",
  statusline1 = "#a7c080",
  statusline2 = "#d3c6aa",
  statusline3 = "#e67e80",
  none        = "NONE",
}
-- stylua: ignore end

local options = {
  ---components be transparent (e.g. status line background)
  transparent_background_level = 0,
  ---Whether italics should be used for keywords and more.
  italics = false,
  ---Disable italic fonts for comments. Comments are in italics by default, set
  ---this to `true` to make them _not_ italic!
  disable_italic_comments = false,
  ---By default, the colour of the sign column background is the same as the as normal text
  ---background, but you can use a grey background by setting this to `"grey"`.
  sign_column_background = "none",
  ---The contrast of line numbers, indent lines, etc. Options are `"high"` or
  ---`"low"` (default).
  ui_contrast = "low",
  ---Dim inactive windows. Only works in Neovim. Can look a bit weird with Telescope.
  ---
  ---When this option is used in conjunction with show_eob set to `false`, the
  ---end of the buffer will only be hidden inside the active window. Inside
  ---inactive windows, the end of buffer filler characters will be visible in
  ---dimmed symbols. This is due to the way Vim and Neovim handle `EndOfBuffer`.
  dim_inactive_windows = false,
  ---Some plugins support highlighting error/warning/info/hint texts, by
  ---default these texts are only underlined, but you can use this option to
  ---also highlight the background of them.
  diagnostic_text_highlight = false,

  ---Some plugins support highlighting error/warning/info/hint lines, but this
  ---feature is disabled by default in this colour scheme.
  diagnostic_line_highlight = false,
  ---By default, this color scheme won't colour the foreground of |spell|, instead
  ---colored under curls will be used. If you also want to colour the foreground,
  ---set this option to `true`.
  spell_foreground = false,
  ---Whether to show the EndOfBuffer highlight.
  show_eob = true,
  ---Style used to make floating windows stand out from other windows. `"bright"`
  ---makes the background of these windows lighter than |hl-Normal|, whereas
  ---`"dim"` makes it darker.
  ---
  ---Floating windows include for instance diagnostic pop-ups, scrollable
  ---documentation windows from completion engines, overlay windows from
  ---installers, etc.
  ---
  ---NB: This is only significant for dark backgrounds as the light palettes
  ---have the same colour for both values in the switch.
  float_style = "bright",
  ---Inlay hints are special markers that are displayed inline with the code to
  ---provide you with additional information. You can use this option to customize
  ---the background color of inlay hints.
  ---
  ---Options are `"none"` or `"dimmed"`.
  inlay_hints_background = "none",
}

local styles = {
  bold = "bold",
  italic = "italic",
  reverse = "reverse",
  undercurl = "undercurl",
  underline = "underline",
  standout = "standout",
  strikethrough = "strikethrough",
  nocombine = "nocombine",
}

-- Comments are italic by default
local comment_italics = options.disable_italic_comments and {} or { styles.italic }
-- All other italics are disabled by default
local optional_italics = options.italics and { styles.italic } or {}

local function syntax_entry(fg, bg, stylings, sp)
  local highlight = { fg = fg, bg = bg }

  if stylings then
    for _, style in ipairs(stylings) do
      highlight[style] = true
    end
  end

  if sp then
    highlight["sp"] = sp
  end

  return highlight
end

local function set_signs_background_colour(colour_to_set)
  if options.transparent_background_level > 0 or options.sign_column_background == "none" then
    return palette.none
  else
    return colour_to_set
  end
end

local function sign_column_respecting_colour(colour_to_set)
  if options.sign_column_background == "none" then
    return palette.none
  else
    return colour_to_set
  end
end

local function set_colour_based_on_ui_contrast(low_contrast_colour, other_colour)
  if options.ui_contrast == "low" then
    return low_contrast_colour
  else
    return other_colour
  end
end

local function transparency_respecting_colour(colour_to_set)
  if options.transparent_background_level > 0 then
    return palette.none
  else
    return colour_to_set
  end
end

local highlights = {
  ColorColumn = syntax_entry(palette.none, palette.bg1),
  Conceal = syntax_entry(set_colour_based_on_ui_contrast(palette.bg5, palette.grey0), palette.none),
  CurSearch = { link = "IncSearch" },
  Cursor = syntax_entry(palette.none, palette.none, { styles.reverse }),
  lCursor = { link = "Cursor" },
  CursorIM = { link = "Cursor" },
  CursorColumn = syntax_entry(palette.none, palette.bg1),
  CursorLine = syntax_entry(palette.none, palette.bg1),
  Directory = syntax_entry(palette.green, palette.none),
  DiffAdd = syntax_entry(palette.none, palette.bg_green),
  DiffChange = syntax_entry(palette.none, palette.bg_blue),
  DiffDelete = syntax_entry(palette.none, palette.bg_red),
  DiffText = syntax_entry(palette.bg0, palette.blue),
  EndOfBuffer = syntax_entry((options.show_eob and palette.bg4) or palette.bg0, palette.none),
  TermCursor = { link = "Cursor" },
  TermCursorNC = { link = "Cursor" },
  ErrorMsg = syntax_entry(palette.red, palette.none, { styles.bold, styles.underline }),
  WinSeparator = { link = "VertSplit" },
  Folded = syntax_entry(palette.grey1, transparency_respecting_colour(palette.bg1)),
  FoldColumn = syntax_entry(
    (options.sign_column_background == "grey" and palette.grey2) or palette.bg5,
    sign_column_respecting_colour(palette.bg1)
  ),
  SignColumn = syntax_entry(palette.fg, sign_column_respecting_colour(palette.bg1)),
  IncSearch = syntax_entry(palette.bg0, palette.red),
  Substitute = syntax_entry(palette.bg0, palette.yellow),
  LineNr = syntax_entry(set_colour_based_on_ui_contrast(palette.bg5, palette.grey0), palette.none),
  LineNrAbove = syntax_entry(set_colour_based_on_ui_contrast(palette.bg5, palette.grey0), palette.none),
  LineNrBelow = syntax_entry(set_colour_based_on_ui_contrast(palette.bg5, palette.grey0), palette.none),
  CursorLineNr = syntax_entry(
    set_colour_based_on_ui_contrast(palette.grey1, palette.grey2),
    sign_column_respecting_colour(palette.bg1)
  ),
  MatchParen = syntax_entry(palette.none, palette.bg4),
  ModeMsg = syntax_entry(palette.fg, palette.none, { styles.bold }),
  MoreMsg = syntax_entry(palette.yellow, palette.none, { styles.bold }),
  NonText = syntax_entry(palette.bg4, palette.none),
  Normal = syntax_entry(palette.fg, transparency_respecting_colour(palette.bg0)),
  NormalFloat = syntax_entry(palette.fg, (options.float_style == "bright" and palette.bg2) or palette.bg_dim),
  FloatBorder = syntax_entry(palette.grey1, (options.float_style == "bright" and palette.bg2) or palette.bg_dim),
  FloatTitle = syntax_entry(
    palette.grey1,
    (options.float_style == "bright" and palette.bg2) or palette.bg_dim,
    { styles.bold }
  ),
  NormalNC = syntax_entry(
    palette.fg,
    transparency_respecting_colour((options.dim_inactive_windows and palette.bg_dim) or palette.bg0)
  ),
  Pmenu = syntax_entry(palette.fg, palette.bg2),
  PmenuSbar = syntax_entry(palette.none, palette.bg2),
  PmenuSel = syntax_entry(palette.bg0, palette.statusline1),
  PmenuThumb = syntax_entry(palette.none, palette.grey0),
  Question = syntax_entry(palette.yellow, palette.none),
  QuickFixLine = syntax_entry(palette.purple, palette.none, { styles.bold }),
  Search = syntax_entry(palette.bg0, palette.green),
  SpecialKey = syntax_entry(palette.yellow, palette.none),
  SpellBad = syntax_entry(
    options.spell_foreground and palette.red or palette.none,
    palette.none,
    { styles.undercurl },
    palette.red
  ),
  SpellCap = syntax_entry(
    options.spell_foreground and palette.blue or palette.none,
    palette.none,
    { styles.undercurl },
    palette.blue
  ),
  SpellLocal = syntax_entry(
    options.spell_foreground and palette.aqua or palette.none,
    palette.none,
    { styles.undercurl },
    palette.aqua
  ),
  SpellRare = syntax_entry(
    options.spell_foreground and palette.purple or palette.none,
    palette.none,
    { styles.undercurl },
    palette.purple
  ),
  StatusLine = syntax_entry(palette.grey1, options.transparent_background_level == 2 and palette.none or palette.bg2),
  StatusLineNC = syntax_entry(
    options.transparent_background_level == 2 and palette.grey0 or palette.grey1,
    options.transparent_background_level == 2 and palette.none or palette.bg1
  ),
  TabLine = syntax_entry(palette.grey2, palette.bg3),
  TabLineFill = syntax_entry(palette.grey1, options.transparent_background_level == 2 and palette.none or palette.bg1),
  TabLineSel = syntax_entry(palette.bg0, palette.statusline1),
  Title = syntax_entry(palette.orange, palette.none, { styles.bold }),
  Visual = syntax_entry(palette.none, palette.bg3),
  VisualNOS = syntax_entry(palette.none, palette.bg3),
  WarningMsg = syntax_entry(palette.yellow, palette.none, { styles.bold }),
  Whitespace = syntax_entry(palette.bg4, palette.none),
  WildMenu = { link = "PmenuSel" },
  WinBar = syntax_entry(
    palette.grey1,
    options.transparent_background_level == 2 and palette.none or palette.bg2,
    { styles.bold }
  ),
  WinBarNC = syntax_entry(
    options.transparent_background_level == 2 and palette.grey0 or palette.grey1,
    options.transparent_background_level == 2 and palette.none or palette.bg1
  ),
  Terminal = syntax_entry(palette.fg, transparency_respecting_colour(palette.bg0)),
  ToolbarLine = syntax_entry(palette.fg, transparency_respecting_colour(palette.bg2)),

  StatusLineTerm = syntax_entry(
    palette.grey1,
    options.transparent_background_level == 2 and palette.none or palette.bg1
  ),
  StatusLineTermNC = syntax_entry(
    options.transparent_background_level == 2 and palette.grey0 or palette.grey1,
    options.transparent_background_level == 2 and palette.none or palette.bg0
  ),
  VertSplit = syntax_entry(palette.bg4, (options.dim_inactive_windows and palette.bg_dim) or palette.none),

  Debug = syntax_entry(palette.orange, palette.none),
  debugPC = syntax_entry(palette.bg0, palette.green),
  debugBreakpoint = syntax_entry(palette.bg0, palette.red),
  ToolbarButton = syntax_entry(palette.bg0, palette.green),
  DiagnosticFloatingError = { link = "ErrorFloat" },
  DiagnosticFloatingWarn = { link = "WarningFloat" },
  DiagnosticFloatingInfo = { link = "InfoFloat" },
  DiagnosticFloatingHint = { link = "HintFloat" },
  DiagnosticError = syntax_entry(palette.red, options.diagnostic_text_highlight and palette.bg_red or palette.none),
  DiagnosticWarn = syntax_entry(
    palette.yellow,
    options.diagnostic_text_highlight and palette.bg_yellow or palette.none
  ),
  DiagnosticInfo = syntax_entry(palette.blue, options.diagnostic_text_highlight and palette.bg_blue or palette.none),
  DiagnosticHint = syntax_entry(palette.green, options.diagnostic_text_highlight and palette.bg_green or palette.none),
  DiagnosticUnnecessary = syntax_entry(palette.grey1, palette.none),
  DiagnosticVirtualTextError = { link = "VirtualTextError" },
  DiagnosticVirtualTextWarn = { link = "VirtualTextWarning" },
  DiagnosticVirtualTextInfo = { link = "VirtualTextInfo" },
  DiagnosticVirtualTextHint = { link = "VirtualTextHint" },
  -- DiagnosticUnderlineError = syntax_entry(
  --   palette.red,
  --   options.diagnostic_text_highlight and palette.bg_red or palette.none,
  --   { styles.undercurl },
  --   palette.red
  -- ),
  -- DiagnosticUnderlineWarn = syntax_entry(
  --   palette.yellow,
  --   options.diagnostic_text_highlight and palette.bg_yellow or palette.none,
  --   { styles.undercurl },
  --   palette.yellow
  -- ),
  -- DiagnosticUnderlineInfo = syntax_entry(
  --   palette.blue,
  --   options.diagnostic_text_highlight and palette.bg_blue or palette.none,
  --   { styles.undercurl },
  --   palette.blue
  -- ),
  -- DiagnosticUnderlineHint = syntax_entry(
  --   palette.green,
  --   options.diagnostic_text_highlight and palette.bg_green or palette.none,
  --   { styles.undercurl },
  --   palette.green
  -- ),
  DiagnosticSignError = { link = "RedSign" },
  DiagnosticSignWarn = { link = "YellowSign" },
  DiagnosticSignInfo = { link = "BlueSign" },
  DiagnosticSignHint = { link = "GreenSign" },

  -- LSP colours
  LspDiagnosticsFloatingError = { link = "DiagnosticFloatingError" },
  LspDiagnosticsFloatingWarning = { link = "DiagnosticFloatingWarn" },
  LspDiagnosticsFloatingInformation = { link = "DiagnosticFloatingInfo" },
  LspDiagnosticsFloatingHint = { link = "DiagnosticFloatingHint" },
  LspDiagnosticsDefaultError = { link = "DiagnosticError" },
  LspDiagnosticsDefaultWarning = { link = "DiagnosticWarn" },
  LspDiagnosticsDefaultInformation = { link = "DiagnosticInfo" },
  LspDiagnosticsDefaultHint = { link = "DiagnosticHint" },
  LspDiagnosticsVirtualTextError = { link = "DiagnosticVirtualTextError" },
  LspDiagnosticsVirtualTextWarning = { link = "DiagnosticVirtualTextWarn" },
  LspDiagnosticsVirtualTextInformation = { link = "DiagnosticVirtualTextInfo" },
  LspDiagnosticsVirtualTextHint = { link = "DiagnosticVirtualTextHint" },
  LspDiagnosticsUnderlineError = { link = "DiagnosticUnderlineError" },
  LspDiagnosticsUnderlineWarning = { link = "DiagnosticUnderlineWarn" },
  LspDiagnosticsUnderlineInformation = { link = "DiagnosticUnderlineInfo" },
  LspDiagnosticsUnderlineHint = { link = "DiagnosticUnderlineHint" },
  LspDiagnosticsSignError = { link = "DiagnosticSignError" },
  LspDiagnosticsSignWarning = { link = "DiagnosticSignWarn" },
  LspDiagnosticsSignInformation = { link = "DiagnosticSignInfo" },
  LspDiagnosticsSignHint = { link = "DiagnosticSignHint" },
  LspInlayHint = { link = "InlayHints" },
  LspReferenceText = { link = "CurrentWord" },
  LspReferenceRead = { link = "CurrentWord" },
  LspReferenceWrite = { link = "CurrentWord" },
  LspCodeLens = { link = "VirtualTextInfo" },
  LspCodeLensSeparator = { link = "VirtualTextHint" },
  LspSignatureActiveParameter = { link = "Search" },
  healthError = { link = "Red" },
  healthSuccess = { link = "Green" },
  healthWarning = { link = "Yellow" },

  Boolean = syntax_entry(palette.purple, palette.none),
  Number = syntax_entry(palette.purple, palette.none),
  Float = syntax_entry(palette.purple, palette.none),

  PreProc = syntax_entry(palette.purple, palette.none, optional_italics),
  PreCondit = syntax_entry(palette.purple, palette.none, optional_italics),
  Include = syntax_entry(palette.purple, palette.none, optional_italics),
  Define = syntax_entry(palette.purple, palette.none, optional_italics),
  Conditional = syntax_entry(palette.red, palette.none, optional_italics),
  Repeat = syntax_entry(palette.red, palette.none, optional_italics),
  Keyword = syntax_entry(palette.red, palette.none, optional_italics),
  Typedef = syntax_entry(palette.red, palette.none, optional_italics),
  Exception = syntax_entry(palette.red, palette.none, optional_italics),
  Statement = syntax_entry(palette.red, palette.none, optional_italics),

  Error = syntax_entry(palette.red, palette.none),
  StorageClass = syntax_entry(palette.orange, palette.none),
  Tag = syntax_entry(palette.orange, palette.none),
  Label = syntax_entry(palette.orange, palette.none),
  Structure = syntax_entry(palette.orange, palette.none),
  Operator = syntax_entry(palette.orange, palette.none),
  Special = syntax_entry(palette.yellow, palette.none),
  SpecialChar = syntax_entry(palette.yellow, palette.none),
  Type = syntax_entry(palette.yellow, palette.none),
  Function = syntax_entry(palette.green, palette.none),
  String = syntax_entry(palette.green, palette.none),
  Character = syntax_entry(palette.green, palette.none),
  Constant = syntax_entry(palette.aqua, palette.none),
  Macro = syntax_entry(palette.aqua, palette.none),
  Identifier = syntax_entry(palette.blue, palette.none),

  Comment = syntax_entry(palette.grey1, palette.none, comment_italics),
  SpecialComment = syntax_entry(palette.grey1, palette.none, comment_italics),
  -- Todo = syntax_entry(palette.bg0, palette.blue, { styles.bold }),

  Delimiter = syntax_entry(palette.fg, palette.none),
  Ignore = syntax_entry(palette.grey1, palette.none),
  Underlined = syntax_entry(palette.none, palette.none, { styles.underline }),

  -- Predefined highlight groups
  Fg = syntax_entry(palette.fg, palette.none),
  Grey = syntax_entry(palette.grey1, palette.none),
  Red = syntax_entry(palette.red, palette.none),
  Orange = syntax_entry(palette.orange, palette.none),
  Yellow = syntax_entry(palette.yellow, palette.none),
  Green = syntax_entry(palette.green, palette.none),
  Aqua = syntax_entry(palette.aqua, palette.none),
  Blue = syntax_entry(palette.blue, palette.none),
  Purple = syntax_entry(palette.purple, palette.none),

  RedItalic = syntax_entry(palette.red, palette.none, optional_italics),
  OrangeItalic = syntax_entry(palette.orange, palette.none, optional_italics),
  YellowItalic = syntax_entry(palette.yellow, palette.none, optional_italics),
  GreenItalic = syntax_entry(palette.green, palette.none, optional_italics),
  AquaItalic = syntax_entry(palette.aqua, palette.none, optional_italics),
  BlueItalic = syntax_entry(palette.blue, palette.none, optional_italics),
  PurpleItalic = syntax_entry(palette.purple, palette.none, optional_italics),

  RedBold = syntax_entry(palette.red, palette.none, { styles.bold }),
  OrangeBold = syntax_entry(palette.orange, palette.none, { styles.bold }),
  YellowBold = syntax_entry(palette.yellow, palette.none, { styles.bold }),
  GreenBold = syntax_entry(palette.green, palette.none, { styles.bold }),
  AquaBold = syntax_entry(palette.aqua, palette.none, { styles.bold }),
  BlueBold = syntax_entry(palette.blue, palette.none, { styles.bold }),
  PurpleBold = syntax_entry(palette.purple, palette.none, { styles.bold }),

  RedSign = syntax_entry(palette.red, set_signs_background_colour(palette.bg1)),
  OrangeSign = syntax_entry(palette.orange, set_signs_background_colour(palette.bg1)),
  YellowSign = syntax_entry(palette.yellow, set_signs_background_colour(palette.bg1)),
  GreenSign = syntax_entry(palette.green, set_signs_background_colour(palette.bg1)),
  AquaSign = syntax_entry(palette.aqua, set_signs_background_colour(palette.bg1)),
  BlueSign = syntax_entry(palette.blue, set_signs_background_colour(palette.bg1)),
  PurpleSign = syntax_entry(palette.purple, set_signs_background_colour(palette.bg1)),

  Added = { link = "Green" },
  Removed = { link = "Red" },
  Changed = { link = "Blue" },

  -- Configuration based on `diagnostic_text_highlight` option
  ErrorText = syntax_entry(
    palette.none,
    options.diagnostic_text_highlight and palette.bg_red or palette.none,
    { styles.undercurl },
    palette.red
  ),
  WarningText = syntax_entry(
    palette.none,
    options.diagnostic_text_highlight and palette.bg_yellow or palette.none,
    { styles.undercurl },
    palette.yellow
  ),
  InfoText = syntax_entry(
    palette.none,
    options.diagnostic_text_highlight and palette.bg_blue or palette.none,
    { styles.undercurl },
    palette.blue
  ),
  HintText = syntax_entry(
    palette.none,
    options.diagnostic_text_highlight and palette.bg_green or palette.none,
    { styles.undercurl },
    palette.green
  ),

  ErrorLine = options.diagnostic_line_highlight and syntax_entry(palette.none, palette.bg_red) or {},
  WarningLine = options.diagnostic_line_highlight and syntax_entry(palette.none, palette.bg_yellow) or {},
  InfoLine = options.diagnostic_line_highlight and syntax_entry(palette.none, palette.bg_blue) or {},
  HintLine = options.diagnostic_line_highlight and syntax_entry(palette.none, palette.bg_green) or {},

  VirtualTextWarning = { link = "Yellow" },
  VirtualTextError = { link = "Red" },
  VirtualTextInfo = { link = "Blue" },
  VirtualTextHint = { link = "Green" },

  -- Diagnostic text inherits the background of the floating window, which is Neovim's default.
  ErrorFloat = syntax_entry(palette.red, palette.none),
  WarningFloat = syntax_entry(palette.yellow, palette.none),
  InfoFloat = syntax_entry(palette.blue, palette.none),
  HintFloat = syntax_entry(palette.green, palette.none),
  CurrentWord = syntax_entry(palette.none, palette.none, { styles.bold }),

  -- Treesitter
  TSStrong = syntax_entry(palette.none, palette.none, { styles.bold }),
  TSEmphasis = syntax_entry(palette.none, palette.none, { styles.italic }),
  TSUnderline = syntax_entry(palette.none, palette.none, { styles.underline }),
  TSStrike = syntax_entry(palette.none, palette.none, { styles.strikethrough }),
  TSNote = syntax_entry(palette.bg0, palette.green, { styles.bold }),
  TSWarning = syntax_entry(palette.bg0, palette.yellow, { styles.bold }),
  TSDanger = syntax_entry(palette.bg0, palette.red, { styles.bold }),
  TSAnnotation = { link = "Purple" },
  TSAttribute = { link = "Purple" },
  TSBoolean = { link = "Purple" },
  TSCharacter = { link = "Aqua" },
  TSCharacterSpecial = { link = "SpecialChar" },
  TSComment = { link = "Comment" },
  TSConditional = { link = "Red" },
  TSConstBuiltin = { link = "PurpleItalic" },
  TSConstMacro = { link = "PurpleItalic" },
  TSConstant = { link = "Constant" },
  TSConstructor = { link = "Green" },
  TSDebug = { link = "Debug" },
  TSDefine = { link = "Define" },
  TSEnvironment = { link = "Macro" },
  TSEnvironmentName = { link = "Type" },
  TSError = { link = "Error" },
  TSException = { link = "Red" },
  TSField = { link = "Blue" },
  TSFloat = { link = "Purple" },
  TSFuncBuiltin = { link = "Green" },
  TSFuncMacro = { link = "Green" },
  TSFunction = { link = "Green" },
  TSFunctionCall = { link = "Green" },
  TSInclude = { link = "Red" },
  TSKeyword = { link = "Red" },
  TSKeywordFunction = { link = "Red" },
  TSKeywordOperator = { link = "Orange" },
  TSKeywordReturn = { link = "Red" },
  TSLabel = { link = "Orange" },
  TSLiteral = { link = "String" },
  TSMath = { link = "Blue" },
  TSMethod = { link = "Green" },
  TSMethodCall = { link = "Green" },
  TSModuleInfoGood = { link = "Green" },
  TSModuleInfoBad = { link = "Red" },
  TSNamespace = { link = "YellowItalic" },
  TSNone = { link = "Fg" },
  TSNumber = { link = "Purple" },
  TSOperator = { link = "Orange" },
  TSParameter = { link = "Fg" },
  TSParameterReference = { link = "Fg" },
  TSPreProc = { link = "PreProc" },
  TSProperty = { link = "Blue" },
  TSPunctBracket = { link = "Fg" },
  TSPunctDelimiter = { link = "Grey" },
  TSPunctSpecial = { link = "Blue" },
  TSRepeat = { link = "Red" },
  TSStorageClass = { link = "Orange" },
  TSStorageClassLifetime = { link = "Orange" },
  TSString = { link = "Aqua" },
  TSStringEscape = { link = "Green" },
  TSStringRegex = { link = "Green" },
  TSStringSpecial = { link = "SpecialChar" },
  TSSymbol = { link = "Aqua" },
  TSTag = { link = "Orange" },
  TSTagAttribute = { link = "Green" },
  TSTagDelimiter = { link = "Green" },
  TSText = { link = "Green" },
  TSTextReference = { link = "Constant" },
  TSTitle = { link = "Title" },
  TSTodo = { link = "Todo" },
  TSType = { link = "YellowItalic" },
  TSTypeBuiltin = { link = "YellowItalic" },
  TSTypeDefinition = { link = "YellowItalic" },
  TSTypeQualifier = { link = "Orange" },
  TSURI = syntax_entry(palette.blue, palette.none, { styles.underline }),
  TSVariable = { link = "Fg" },
  TSVariableBuiltin = { link = "PurpleItalic" },

  javascriptTSInclude = { link = "Purple" },
  typescriptTSInclude = { link = "Purple" },
  tsxTSConstructor = { link = "TSType" },
  luaTSConstructor = { link = "luaBraces" },
  goTSInclude = { link = "Purple" },
  goTSNamespace = { link = "Fg" },
  goTSConstBuiltin = { link = "AquaItalic" },
  htmlTSText = { link = "TSNone" },
  jsonKeyword = { link = "Green" },
  jsonString = { link = "Fg" },
  jsonQuote = { link = "Grey" },
  jsonTSLabel = { link = "jsonKeyword" },
  jsonTSString = { link = "jsonString" },
  jsonTSStringEscape = { link = "SpecialChar" },
  yamlBlockMappingKey = { link = "Green" },
  yamlString = { link = "Fg" },
  yamlConstant = { link = "OrangeItalic" },
  yamlKeyValueDelimiter = { link = "Grey" },
  yamlTSField = { link = "yamlBlockMappingKey" },
  yamlTSString = { link = "yamlString" },
  yamlTSStringEscape = { link = "SpecialChar" },
  yamlTSBoolean = { link = "yamlConstant" },
  yamlTSConstBuiltin = { link = "yamlConstant" },
  tomlKey = { link = "Green" },
  tomlString = { link = "Fg" },
  tomlTSProperty = { link = "tomlKey" },
  tomlTSString = { link = "tomlString" },

  -- New Treesitter highlights
  ["@annotation"] = { link = "TSAnnotation" },
  ["@attribute"] = { link = "TSAttribute" },
  ["@boolean"] = { link = "TSBoolean" },
  ["@boolean.yaml"] = { link = "yamlTSBoolean" },
  ["@character"] = { link = "TSCharacter" },
  ["@character.special"] = { link = "TSCharacterSpecial" },
  -- ["@comment"] = { link = "TSComment" },
  -- ["@comment.error"] = { link = "TSDanger" },
  -- ["@comment.note"] = { link = "TSNote" },
  -- ["@comment.todo"] = { link = "TSTodo" },
  -- ["@comment.warning"] = { link = "TSWarning" },
  ["@conceal"] = { link = "Grey" },
  ["@conditional"] = { link = "TSConditional" },
  ["@constant"] = { link = "TSConstant" },
  ["@constant.builtin"] = { link = "TSConstBuiltin" },
  ["@constant.builtin.go"] = { link = "goTSConstBuiltin" },
  ["@constant.builtin.yaml"] = { link = "yamlTSConstBuiltin" },
  ["@constant.macro"] = { link = "TSConstMacro" },
  ["@constant.regex"] = { link = "TSConstBuiltin" },
  ["@constructor"] = { link = "TSConstructor" },
  ["@constructor.lua"] = { link = "luaTSConstructor" },
  ["@constructor.tsx"] = { link = "tsxTSConstructor" },
  ["@debug"] = { link = "TSDebug" },
  ["@define"] = { link = "TSDefine" },
  ["@diff.delta"] = { link = "diffChanged" },
  ["@diff.minus"] = { link = "diffRemoved" },
  ["@diff.plus"] = { link = "diffAdded" },
  ["@error"] = { link = "TSError" }, -- This has been removed from nvim-treesitter
  ["@exception"] = { link = "TSException" },
  ["@field"] = { link = "TSField" },
  ["@field.yaml"] = { link = "yamlTSField" },
  ["@float"] = { link = "TSFloat" },
  ["@function"] = { link = "TSFunction" },
  ["@function.builtin"] = { link = "TSFuncBuiltin" },
  ["@function.call"] = { link = "TSFunctionCall" },
  ["@function.macro"] = { link = "TSFuncMacro" },
  ["@function.method"] = { link = "TSMethod" },
  ["@function.method.call"] = { link = "TSMethodCall" },
  ["@include"] = { link = "TSInclude" },
  ["@include.go"] = { link = "goTSInclude" },
  ["@include.javascript"] = { link = "javascriptTSInclude" },
  ["@include.typescript"] = { link = "typescriptTSInclude" },
  ["@keyword"] = { link = "TSKeyword" },
  ["@keyword.conditional"] = { link = "TSConditional" },
  ["@keyword.debug"] = { link = "TSDebug" },
  ["@keyword.directive"] = { link = "TSPreProc" },
  ["@keyword.directive.define"] = { link = "TSDefine" },
  ["@keyword.exception"] = { link = "TSException" },
  ["@keyword.function"] = { link = "TSKeywordFunction" },
  ["@keyword.import"] = { link = "TSInclude" },
  ["@keyword.import.go"] = { link = "goTSInclude" },
  ["@keyword.import.javascript"] = { link = "javascriptTSInclude" },
  ["@keyword.import.typescript"] = { link = "typescriptTSInclude" },
  ["@keyword.modifier"] = { link = "TSTypeQualifier" },
  ["@keyword.operator"] = { link = "TSKeywordOperator" },
  ["@keyword.repeat"] = { link = "TSRepeat" },
  ["@keyword.return"] = { link = "TSKeywordReturn" },
  ["@keyword.storage"] = { link = "TSStorageClass" },
  ["@label"] = { link = "TSLabel" },
  ["@label.json"] = { link = "jsonTSLabel" },
  ["@markup.emphasis"] = { link = "TSEmphasis" },
  ["@markup.environment"] = { link = "TSEnvironment" },
  ["@markup.environment.name"] = { link = "TSEnvironmentName" },
  ["@markup.heading"] = { link = "TSTitle" },
  ["@markup.heading.1.markdown"] = { link = "markdownH1" },
  ["@markup.heading.2.markdown"] = { link = "markdownH2" },
  ["@markup.heading.3.markdown"] = { link = "markdownH3" },
  ["@markup.heading.4.markdown"] = { link = "markdownH4" },
  ["@markup.heading.5.markdown"] = { link = "markdownH5" },
  ["@markup.heading.6.markdown"] = { link = "markdownH6" },
  ["@markup.heading.1.marker.markdown"] = { link = "@conceal" },
  ["@markup.heading.2.marker.markdown"] = { link = "@conceal" },
  ["@markup.heading.3.marker.markdown"] = { link = "@conceal" },
  ["@markup.heading.4.marker.markdown"] = { link = "@conceal" },
  ["@markup.heading.5.marker.markdown"] = { link = "@conceal" },
  ["@markup.heading.6.marker.markdown"] = { link = "@conceal" },
  ["@markup.italic"] = { link = "TSEmphasis" },
  ["@markup.link"] = { link = "TSTextReference" },
  ["@markup.link.label"] = { link = "TSStringSpecial" },
  ["@markup.link.url"] = { link = "TSURI" },
  ["@markup.list"] = { link = "TSPunctSpecial" },
  ["@markup.list.checked"] = { link = "Green" },
  ["@markup.list.unchecked"] = { link = "Ignore" },
  ["@markup.math"] = { link = "TSMath" },
  ["@markup.quote"] = { link = "Grey" },
  ["@markup.raw"] = { link = "TSLiteral" },
  ["@markup.strike"] = { link = "TSStrike" },
  ["@markup.strong"] = { link = "TSStrong" },
  ["@markup.underline"] = { link = "TSUnderline" },
  ["@math"] = { link = "TSMath" },
  ["@method"] = { link = "TSMethod" },
  ["@method.call"] = { link = "TSMethodCall" },
  ["@module"] = { link = "TSNamespace" },
  ["@module.go"] = { link = "goTSNamespace" },
  ["@namespace"] = { link = "TSNamespace" },
  ["@namespace.go"] = { link = "goTSNamespace" },
  ["@none"] = { link = "TSNone" },
  ["@number"] = { link = "TSNumber" },
  ["@number.float"] = { link = "TSFloat" },
  ["@operator"] = { link = "TSOperator" },
  ["@parameter"] = { link = "TSParameter" },
  ["@parameter.reference"] = { link = "TSParameterReference" },
  ["@preproc"] = { link = "TSPreProc" },
  ["@property"] = { link = "TSProperty" },
  ["@property.toml"] = { link = "tomlTSProperty" },
  ["@punctuation.bracket"] = { link = "TSPunctBracket" },
  ["@punctuation.bracket.regex"] = { link = "TSStringRegex" },
  ["@punctuation.delimiter"] = { link = "TSPunctDelimiter" },
  ["@punctuation.special"] = { link = "TSPunctSpecial" },
  ["@punctuation.special.typescript"] = { link = "TSOperator" },
  ["@repeat"] = { link = "TSRepeat" },
  ["@storageclass"] = { link = "TSStorageClass" },
  ["@storageclass.lifetime"] = { link = "TSStorageClassLifetime" },
  ["@strike"] = { link = "TSStrike" },
  ["@string"] = { link = "TSString" },
  ["@string.escape"] = { link = "TSStringEscape" },
  ["@string.escape.json"] = { link = "jsonTSStringEscape" },
  ["@string.escape.yaml"] = { link = "yamlTSStringEscape" },
  ["@string.json"] = { link = "jsonTSString" },
  ["@string.regex"] = { link = "TSStringRegex" },
  ["@string.regexp"] = { link = "TSStringRegex" },
  ["@string.special"] = { link = "TSStringSpecial" },
  ["@string.special.symbol"] = { link = "TSSymbol" },
  ["@string.special.url"] = { link = "TSURI" },
  ["@string.toml"] = { link = "tomlTSString" },
  ["@string.yaml"] = { link = "yamlTSString" },
  ["@symbol"] = { link = "TSSymbol" },
  ["@tag"] = { link = "TSTag" },
  ["@tag.attribute"] = { link = "TSTagAttribute" },
  ["@tag.delimiter"] = { link = "TSTagDelimiter" },
  ["@text"] = { link = "TSText" },
  ["@text.danger"] = { link = "TSDanger" },
  ["@text.diff.add"] = { link = "diffAdded" },
  ["@text.diff.delete"] = { link = "diffRemoved" },
  ["@text.emphasis"] = { link = "TSEmphasis" },
  ["@text.environment"] = { link = "TSEnvironment" },
  ["@text.environment.name"] = { link = "TSEnvironmentName" },
  ["@text.gitcommit"] = { link = "TSNone" },
  ["@text.html"] = { link = "htmlTSText" },
  ["@text.literal"] = { link = "TSLiteral" },
  ["@text.math"] = { link = "TSMath" },
  ["@text.note"] = { link = "TSNote" },
  ["@text.reference"] = { link = "TSTextReference" },
  ["@text.strike"] = { link = "TSStrike" },
  ["@text.strong"] = { link = "TSStrong" },
  ["@text.title"] = { link = "TSTitle" },
  ["@text.todo"] = { link = "TSTodo" },
  ["@text.todo.checked"] = { link = "Green" },
  ["@text.todo.unchecked"] = { link = "Ignore" },
  ["@text.underline"] = { link = "TSUnderline" },
  ["@text.uri"] = { link = "TSURI" },
  ["@text.warning"] = { link = "TSWarning" },
  ["@todo"] = { link = "TSTodo" },
  ["@type"] = { link = "TSType" },
  ["@type.builtin"] = { link = "TSTypeBuiltin" },
  ["@type.definition"] = { link = "TSTypeDefinition" },
  ["@type.qualifier"] = { link = "TSTypeQualifier" },
  ["@uri"] = { link = "TSURI" },
  ["@variable"] = { link = "TSVariable" },
  ["@variable.builtin"] = { link = "TSVariableBuiltin" },
  ["@variable.member"] = { link = "TSField" },
  ["@variable.member.yaml"] = { link = "yamlTSField" },
  ["@variable.parameter"] = { link = "TSParameter" },

  -- LSP Semantic token highlights
  ["@lsp.type.boolean"] = { link = "@boolean" },
  ["@lsp.type.builtinConstant"] = { link = "@constant.builtin" },
  ["@lsp.type.builtinType"] = { link = "@type.builtin" },
  ["@lsp.type.class"] = { link = "@type" },
  ["@lsp.type.comment"] = { link = "@comment" },
  ["@lsp.type.decorator"] = { link = "@function" },
  ["@lsp.type.derive"] = { link = "@constructor" },
  ["@lsp.type.deriveHelper"] = { link = "@attribute" },
  ["@lsp.type.enum"] = { link = "@type" },
  ["@lsp.type.enumMember"] = { link = "@property" },
  ["@lsp.type.escapeSequence"] = { link = "@string.escape" },
  ["@lsp.type.formatSpecifier"] = { link = "@punctuation.special" },
  ["@lsp.type.function"] = { link = "@function" },
  ["@lsp.type.generic"] = { link = "@text" },
  ["@lsp.type.interface"] = { link = "@type" },
  ["@lsp.type.keyword"] = { link = "@keyword" },
  ["@lsp.type.lifetime"] = { link = "@storageclass.lifetime" },
  ["@lsp.type.macro"] = { link = "@constant.macro" },
  ["@lsp.type.magicFunction"] = { link = "@function.builtin" },
  ["@lsp.type.method"] = { link = "@method" },
  ["@lsp.type.modifier"] = { link = "@type.qualifier" },
  ["@lsp.type.namespace"] = { link = "@namespace" },
  ["@lsp.type.namespace.go"] = { link = "@namespace.go" },
  ["@lsp.type.number"] = { link = "@number" },
  ["@lsp.type.operator"] = { link = "@operator" },
  ["@lsp.type.parameter"] = { link = "@parameter" },
  ["@lsp.type.property"] = { link = "@property" },
  ["@lsp.type.regexp"] = { link = "@string.regex" },
  ["@lsp.type.selfKeyword"] = { link = "@variable.builtin" },
  ["@lsp.type.selfTypeKeyword"] = { link = "@type" },
  ["@lsp.type.string"] = { link = "@string" },
  ["@lsp.type.struct"] = { link = "@type" },
  ["@lsp.type.type"] = { link = "@type" },
  ["@lsp.type.typeAlias"] = { link = "@type.definition" },
  ["@lsp.type.typeParameter"] = { link = "@type.definition" },
  ["@lsp.type.variable"] = { link = "@variable" },
  ["@lsp.type.variable.lua"] = syntax_entry(palette.none, palette.none),
  ["@lsp.typemod.class.defaultLibrary"] = { link = "@type.builtin" },
  ["@lsp.typemod.enum.defaultLibrary"] = { link = "@type.builtin" },
  ["@lsp.typemod.enumMember.defaultLibrary"] = { link = "@constant.builtin" },
  ["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
  ["@lsp.typemod.function.readonly"] = { link = "@method" },
  ["@lsp.typemod.keyword.async"] = { link = "@keyword" },
  ["@lsp.typemod.keyword.injected"] = { link = "@keyword" },
  ["@lsp.typemod.macro.defaultLibrary"] = { link = "@function.builtin" },
  ["@lsp.typemod.method.defaultLibrary"] = { link = "@function.builtin" },
  ["@lsp.typemod.method.readonly"] = { link = "@method" },
  ["@lsp.typemod.operator.injected"] = { link = "@operator" },
  ["@lsp.typemod.string.injected"] = { link = "@string" },
  ["@lsp.typemod.struct.defaultLibrary"] = { link = "@type.builtin" },
  ["@lsp.typemod.type.defaultLibrary"] = { link = "@type.builtin" },
  ["@lsp.typemod.typeAlias.defaultLibrary"] = { link = "@type.builtin" },
  ["@lsp.typemod.variable.callable"] = { link = "@function" },
  ["@lsp.typemod.variable.constant.rust"] = { link = "@constant" },
  ["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
  ["@lsp.typemod.variable.defaultLibrary.go"] = { link = "@constant.builtin.go" },
  ["@lsp.typemod.variable.defaultLibrary.javascript"] = { link = "@constant.builtin" },
  ["@lsp.typemod.variable.defaultLibrary.javascriptreact"] = { link = "@constant.builtin" },
  ["@lsp.typemod.variable.defaultLibrary.typescript"] = { link = "@constant.builtin" },
  ["@lsp.typemod.variable.defaultLibrary.typescriptreact"] = { link = "@constant.builtin" },
  ["@lsp.typemod.variable.injected"] = { link = "@variable" },
  ["@lsp.typemod.variable.static"] = { link = "Red" },

  -- HiPhish/rainbow-delimiters
  RainbowDelimiterRed = { link = "Red" },
  RainbowDelimiterOrange = { link = "Orange" },
  RainbowDelimiterYellow = { link = "Yellow" },
  RainbowDelimiterGreen = { link = "Green" },
  RainbowDelimiterCyan = { link = "Aqua" },
  RainbowDelimiterBlue = { link = "Blue" },
  RainbowDelimiterViolet = { link = "Purple" },

  -- Diff
  diffAdded = { link = "Added" },
  diffRemoved = { link = "Removed" },
  diffChanged = { link = "Changed" },
  diffOldFile = { link = "Yellow" },
  diffNewFile = { link = "Orange" },
  diffFile = { link = "Aqua" },
  diffLine = { link = "Grey" },
  diffIndexLine = { link = "Purple" },

  -- Shougo/denite.nvim
  deniteMatchedChar = syntax_entry(palette.green, palette.none, { styles.bold }),
  deniteMatchedRange = syntax_entry(palette.green, palette.none, { styles.bold, styles.underline }),
  deniteInput = syntax_entry(palette.green, palette.bg3, { styles.bold }),
  deniteStatusLineNumber = syntax_entry(palette.purple, palette.bg3),
  deniteStatusLinePath = syntax_entry(palette.fg, palette.bg3),
  deniteSelectedLin = { link = "Green" },

  -- folke/which-key.nvim
  WhichKey = { link = "Red" },
  WhichKeyDesc = { link = "Blue" },
  WhichKeyFloat = syntax_entry(palette.none, palette.bg1),
  WhichKeyGroup = { link = "Yellow" },
  WhichKeySeparator = { link = "Green" },
  WhichKeyValue = syntax_entry(palette.fg, palette.none),

  -- APZelos/blamer.nvim
  Blamer = { link = "Grey" },

  -- voldikss/vim-floaterm
  FloatermBorder = { link = "Grey" },

  -- MattesGroeger/vim-bookmarks
  BookmarkSign = { link = "BlueSign" },
  BookmarkAnnotationSign = { link = "GreenSign" },
  BookmarkLine = { link = "DiffChange" },
  BookmarkAnnotationLine = { link = "DiffAdd" },

  -- hrsh7th/nvim-cmp
  CmpItemAbbrMatch = syntax_entry(palette.green, palette.none, { styles.bold }),
  CmpItemAbbrMatchFuzzy = syntax_entry(palette.green, palette.none, { styles.bold }),
  CmpItemAbbr = { link = "Fg" },
  CmpItemAbbrDeprecated = { link = "Grey" },
  CmpItemMenu = { link = "Fg" },
  CmpItemKind = { link = "Yellow" },

  -- nvim-telescope/telescope.nvim
  TelescopeMatching = syntax_entry(palette.green, palette.none, { styles.bold }),
  TelescopeBorder = { link = "Grey" },
  TelescopePromptPrefix = { link = "Orange" },
  TelescopeSelection = { link = "DiffAdd" },

  -- ighagwan/fzf-lua
  FzfLuaBorder = { link = "Grey" },

  -- folke/snacks.nvim {{{
  SnacksPicker = { link = "Normal" },
  SnacksPickerBorder = { link = "Grey" },
  SnacksPickerTitle = { link = "Title" },
  SnacksPickerFooter = { link = "SnacksPickerTitle" },
  SnacksPickerPrompt = { link = "Orange" },
  SnacksPickerInputCursorLine = { link = "Normal" },
  SnacksPickerListCursorLine = { link = "DiffAdd" },
  SnacksPickerMatch = syntax_entry(palette.green, palette.none, { styles.bold }),
  SnacksPickerToggle = { link = "CursorLine" },
  SnacksPickerDir = { link = "Comment" },
  SnacksPickerBufFlags = { link = "Grey" },
  SnacksPickerSelected = { link = "Aqua" },
  SnacksPickerKeymapRhs = { link = "Grey" },
  -- }}}

  -- lewis6991/gitsigns.nvim
  GitSignsAdd = { link = "GreenSign" },
  GitSignsChange = { link = "BlueSign" },
  GitSignsDelete = { link = "RedSign" },
  GitSignsAddNr = { link = "Green" },
  GitSignsChangeNr = { link = "Blue" },
  GitSignsDeleteNr = { link = "Red" },
  GitSignsAddLn = { link = "DiffAdd" },
  GitSignsChangeLn = { link = "DiffChange" },
  GitSignsDeleteLn = { link = "DiffDelete" },
  GitSignsCurrentLineBlame = { link = "Grey" },

  -- lukas-reineke/indent-blankline.nvim
  IblScope = syntax_entry(palette.grey1, palette.none, { styles.nocombine }),
  IblIndent = syntax_entry(palette.bg4, palette.none, { styles.nocombine }),
  IndentBlanklineContextChar = { link = "IblScope" },
  IndentBlanklineChar = { link = "IblIndent" },
  IndentBlanklineSpaceChar = { link = "IndentBlanklineChar" },
  IndentBlanklineSpaceCharBlankline = { link = "IndentBlanklineChar" },

  -- romgrk/barbar.nvim
  BufferCurrent = syntax_entry(palette.fg, palette.bg0),
  BufferCurrentIndex = syntax_entry(palette.fg, palette.bg0),
  BufferCurrentMod = syntax_entry(palette.blue, palette.bg0),
  BufferCurrentSign = syntax_entry(palette.statusline1, palette.bg0),
  BufferCurrentTarget = syntax_entry(palette.red, palette.bg0, { styles.bold }),
  BufferCurrentADDED = syntax_entry(palette.green, palette.bg0),
  BufferCurrentCHANGED = syntax_entry(palette.blue, palette.bg0),
  BufferCurrentDELETED = syntax_entry(palette.red, palette.bg0),
  BufferCurrentERROR = syntax_entry(palette.red, palette.bg0),
  BufferCurrentHINT = syntax_entry(palette.yellow, palette.bg0),
  BufferCurrentINFO = syntax_entry(palette.aqua, palette.bg0),
  BufferCurrentWARN = syntax_entry(palette.orange, palette.bg0),
  BufferVisible = syntax_entry(palette.fg, palette.bg_dim),
  BufferVisibleIndex = syntax_entry(palette.fg, palette.bg_dim),
  BufferVisibleMod = syntax_entry(palette.blue, palette.bg_dim),
  BufferVisibleSign = syntax_entry(palette.statusline1, palette.bg_dim),
  BufferVisibleTarget = syntax_entry(palette.yellow, palette.bg_dim, { styles.bold }),
  BufferVisibleADDED = syntax_entry(palette.green, palette.bg_dim),
  BufferVisibleCHANGED = syntax_entry(palette.blue, palette.bg_dim),
  BufferVisibleDELETED = syntax_entry(palette.red, palette.bg_dim),
  BufferVisibleERROR = syntax_entry(palette.red, palette.bg_dim),
  BufferVisibleHINT = syntax_entry(palette.yellow, palette.bg_dim),
  BufferVisibleINFO = syntax_entry(palette.aqua, palette.bg_dim),
  BufferVisibleWARN = syntax_entry(palette.orange, palette.bg_dim),
  BufferInactive = syntax_entry(palette.grey1, palette.bg_dim),
  BufferInactiveIndex = syntax_entry(palette.grey1, palette.bg_dim),
  BufferInactiveMod = syntax_entry(palette.grey1, palette.bg_dim),
  BufferInactiveSign = syntax_entry(palette.grey0, palette.bg_dim),
  BufferInactiveTarget = syntax_entry(palette.yellow, palette.bg_dim, { styles.bold }),
  BufferInactiveADDED = { link = "BufferInactiveSign" },
  BufferInactiveCHANGED = { link = "BufferInactiveSign" },
  BufferInactiveDELETED = { link = "BufferInactiveSign" },
  BufferInactiveERROR = syntax_entry(palette.grey1, palette.bg_dim),
  BufferInactiveHINT = syntax_entry(palette.grey1, palette.bg_dim),
  BufferInactiveINFO = syntax_entry(palette.grey1, palette.bg_dim),
  BufferInactiveWARN = syntax_entry(palette.grey1, palette.bg_dim),
  BufferTabpages = syntax_entry(palette.grey1, palette.bg_dim, { styles.bold }),
  BufferTabpagesSep = syntax_entry(palette.grey0, palette.bg_dim, { styles.bold }),
  BufferTabpageFill = syntax_entry(palette.bg_dim, palette.bg_dim),

  BlinkCmpLabelMatch = syntax_entry(palette.green, palette.none, { styles.bold }),

  -- SmiteshP/nvim-navic
  NavicIconsFile = syntax_entry(palette.fg, palette.none),
  NavicIconsModule = syntax_entry(palette.yellow, palette.none),
  NavicIconsNamespace = syntax_entry(palette.fg, palette.none),
  NavicIconsPackage = syntax_entry(palette.fg, palette.none),
  NavicIconsClass = syntax_entry(palette.orange, palette.none),
  NavicIconsMethod = syntax_entry(palette.blue, palette.none),
  NavicIconsProperty = syntax_entry(palette.green, palette.none),
  NavicIconsField = syntax_entry(palette.green, palette.none),
  NavicIconsConstructor = syntax_entry(palette.orange, palette.none),
  NavicIconsEnum = syntax_entry(palette.orange, palette.none),
  NavicIconsInterface = syntax_entry(palette.orange, palette.none),
  NavicIconsFunction = syntax_entry(palette.blue, palette.none),
  NavicIconsVariable = syntax_entry(palette.purple, palette.none),
  NavicIconsConstant = syntax_entry(palette.purple, palette.none),
  NavicIconsString = syntax_entry(palette.green, palette.none),
  NavicIconsNumber = syntax_entry(palette.orange, palette.none),
  NavicIconsBoolean = syntax_entry(palette.orange, palette.none),
  NavicIconsArray = syntax_entry(palette.orange, palette.none),
  NavicIconsObject = syntax_entry(palette.orange, palette.none),
  NavicIconsKey = syntax_entry(palette.purple, palette.none),
  NavicIconsKeyword = syntax_entry(palette.purple, palette.none),
  NavicIconsNull = syntax_entry(palette.orange, palette.none),
  NavicIconsEnumMember = syntax_entry(palette.green, palette.none),
  NavicIconsStruct = syntax_entry(palette.orange, palette.none),
  NavicIconsEvent = syntax_entry(palette.orange, palette.none),
  NavicIconsOperator = syntax_entry(palette.fg, palette.none),
  NavicIconsTypeParameter = syntax_entry(palette.green, palette.none),
  NavicText = syntax_entry(palette.fg, palette.none),
  NavicSeparator = syntax_entry(palette.fg, palette.none),

  -- rcarriga/nvim-notify
  NotifyBackground = syntax_entry(palette.none, palette.bg0),
  -- Borders
  NotifyDEBUGBorder = { link = "Grey" },
  NotifyERRORBorder = { link = "Red" },
  NotifyINFOBorder = { link = "Green" },
  NotifyTRACEBorder = { link = "Purple" },
  NotifyWARNBorder = { link = "Yellow" },

  -- Icons
  NotifyDEBUGIcon = { link = "Grey" },
  NotifyERRORIcon = { link = "Red" },
  NotifyINFOIcon = { link = "Green" },
  NotifyTRACEIcon = { link = "Purple" },
  NotifyWARNIcon = { link = "Yellow" },

  -- Titles
  NotifyDEBUGTitle = { link = "Grey" },
  NotifyERRORTitle = { link = "Red" },
  NotifyINFOTitle = { link = "Green" },
  NotifyTRACETitle = { link = "Purple" },
  NotifyWARNTitle = { link = "Yellow" },

  -- rcarriga/nvim-dap-ui
  DapUIModifiedValue = syntax_entry(palette.blue, palette.none, { styles.bold }),
  DapUIBreakpointsCurrentLine = syntax_entry(palette.blue, palette.none, { styles.bold }),
  DapUIPlayPause = syntax_entry(palette.green, palette.bg2),
  DapUIRestart = syntax_entry(palette.green, palette.bg2),
  DapUIStop = syntax_entry(palette.red, palette.bg2),
  DapUIUnavailable = syntax_entry(palette.grey1, palette.bg2),
  DapUIStepOver = syntax_entry(palette.blue, palette.bg2),
  DapUIStepInto = syntax_entry(palette.blue, palette.bg2),
  DapUIStepBack = syntax_entry(palette.blue, palette.bg2),
  DapUIStepOut = syntax_entry(palette.blue, palette.bg2),
  DapUIScope = { link = "Blue" },
  DapUIType = { link = "Purple" },
  DapUIDecoration = { link = "Blue" },
  DapUIThread = { link = "Green" },
  DapUIStoppedThread = { link = "Blue" },
  DapUISource = { link = "Purple" },
  DapUILineNumber = { link = "Blue" },
  DapUIFloatBorder = { link = "Blue" },
  DapUIWatchesEmpty = { link = "Red" },
  DapUIWatchesValue = { link = "Green" },
  DapUIWatchesError = { link = "Red" },
  DapUIBreakpointsPath = { link = "Blue" },
  DapUIBreakpointsInfo = { link = "Green" },

  -- b0o/incline.nvim
  InclineNormalNC = syntax_entry(palette.grey1, palette.bg2),

  -- echasnovski/mini.nvim
  MiniAnimateCursor = syntax_entry(palette.none, palette.none, { styles.reverse, styles.nocombine }),
  MiniFilesFile = syntax_entry(palette.fg, palette.none),
  MiniFilesTitleFocused = syntax_entry(
    palette.green,
    options.float_style == "dim" and palette.bg_dim or palette.bg2,
    { styles.bold }
  ),
  -- MiniHipatternsFixme = syntax_entry(palette.bg0, palette.red, { styles.bold }),
  -- MiniHipatternsHack = syntax_entry(palette.bg0, palette.yellow, { styles.bold }),
  -- MiniHipatternsNote = syntax_entry(palette.bg0, palette.blue, { styles.bold }),
  -- MiniHipatternsTodo = syntax_entry(palette.bg0, palette.green, { styles.bold }),
  MiniHiPatternsWarn = syntax_entry(palette.bg0, "#ff2d00"),
  MiniHiPatternsFixme = syntax_entry(palette.bg0, "#ff8c00"),
  MiniHiPatternsTodo = syntax_entry(palette.bg0, "#98c379"),
  MiniHiPatternsHack = syntax_entry(palette.bg0, "#d699b6"),
  MiniHiPatternsNote = syntax_entry(palette.bg0, "#3498db"),
  MiniIconsAzure = syntax_entry(palette.blue, palette.none),
  MiniIconsBlue = syntax_entry(palette.blue, palette.none),
  MiniIconsCyan = syntax_entry(palette.aqua, palette.none),
  MiniIconsGreen = syntax_entry(palette.green, palette.none),
  MiniIconsGrey = syntax_entry(palette.grey2, palette.none),
  MiniIconsOrange = syntax_entry(palette.orange, palette.none),
  MiniIconsPurple = syntax_entry(palette.purple, palette.none),
  MiniIconsRed = syntax_entry(palette.red, palette.none),
  MiniIconsYellow = syntax_entry(palette.yellow, palette.none),
  MiniIndentscopePrefix = syntax_entry(palette.none, palette.none, { styles.nocombine }),
  MiniJump2dSpot = syntax_entry(palette.orange, palette.none, { styles.bold, styles.nocombine }),
  MiniJump2dSpotAhead = syntax_entry(palette.aqua, palette.none, { styles.nocombine }),
  MiniJump2dSpotUnique = syntax_entry(palette.yellow, palette.none, { styles.bold, styles.nocombine }),
  MiniPickPrompt = syntax_entry(palette.blue, options.float_style == "dim" and palette.bg_dim or palette.bg2),
  MiniStarterCurrent = syntax_entry(palette.none, palette.none, { styles.nocombine }),
  MiniStatuslineDevinfo = syntax_entry(palette.grey2, palette.bg1),
  MiniStatuslineFilename = syntax_entry(palette.grey1, palette.bg2),
  MiniStatuslineModeCommand = syntax_entry(palette.bg0, palette.aqua),
  MiniStatuslineModeInsert = syntax_entry(palette.bg0, palette.statusline2),
  MiniStatuslineModeNormal = syntax_entry(palette.bg0, palette.statusline1),
  MiniStatuslineModeOther = syntax_entry(palette.bg0, palette.purple, { styles.bold }),
  MiniStatuslineModeReplace = syntax_entry(palette.bg0, palette.orange, { styles.bold }),
  MiniStatuslineModeVisual = syntax_entry(palette.bg0, palette.statusline3, { styles.bold }),
  MiniStatuslineDiffAdd = syntax_entry(palette.green, palette.bg1),
  MiniStatuslineDiffChange = syntax_entry(palette.blue, palette.bg1),
  MiniStatuslineDiffDelete = syntax_entry(palette.red, palette.bg1),
  MiniStatuslineDiagError = syntax_entry(palette.red, palette.bg2),
  MiniStatuslineDiagWarn = syntax_entry(palette.yellow, palette.bg2),
  MiniStatuslineDiagInfo = syntax_entry(palette.purple, palette.bg2),
  MiniStatuslineDiagHint = syntax_entry(palette.blue, palette.bg2),
  MiniStatuslineFileinfo = syntax_entry(palette.grey2, palette.bg2),
  MiniStatuslineLocation = syntax_entry(palette.grey2, palette.bg1),
  MiniStatuslineInactive = { link = "Grey" },
  MiniTablineCurrent = syntax_entry(palette.blue, palette.bg1),
  MiniTablineHidden = syntax_entry(palette.grey1, palette.bg1),
  -- MiniTablineFill = { link = "TablineFill" },
  MiniTablineFill = syntax_entry(palette.bg2, palette.bg1),
  MiniTablineModifiedCurrent = syntax_entry(palette.blue, palette.bg1),
  MiniTablineModifiedHidden = syntax_entry(palette.grey1, palette.bg1),
  MiniTablineModifiedVisible = syntax_entry(palette.grey1, palette.bg1),
  MiniTablineTabpagesection = syntax_entry(palette.bg2, palette.bg1, { styles.bold }),
  MiniTablineVisible = syntax_entry(palette.grey1, palette.bg1),
  MiniTestEmphasis = syntax_entry(palette.none, palette.none, { styles.bold }),
  MiniTestFail = syntax_entry(palette.red, palette.none, { styles.bold }),
  MiniTestPass = syntax_entry(palette.green, palette.none, { styles.bold }),
  MiniTrailspace = syntax_entry(palette.none, palette.red),
  MiniAnimateNormalFloat = { link = "NormalFloat" },
  MiniClueBorder = { link = "FloatBorder" },
  MiniClueDescGroup = { link = "DiagnosticFloatingWarn" },
  MiniClueDescSingle = { link = "NormalFloat" },
  MiniClueNextKey = { link = "DiagnosticFloatingHint" },
  MiniClueNextKeyWithPostkeys = { link = "DiagnosticFloatingError" },
  MiniClueSeparator = { link = "DiagnosticFloatingInfo" },
  MiniClueTitle = { link = "FloatTitle" },
  MiniCompletionActiveParameter = { link = "LspSignatureActiveParameter" },
  MiniCursorword = { underline = true },
  MiniCursorwordCurrent = { underline = true },
  MiniDepsChangeAdded = { link = "Added" },
  MiniDepsChangeRemoved = { link = "Removed" },
  MiniDepsHints = { link = "DiagnosticHint" },
  MiniDepsInfo = { link = "DiagnosticInfo" },
  MiniDepsMsgBreaking = { link = "DiagnosticWarn" },
  MiniDepsPlaceholder = { link = "Comment" },
  MiniDepsTitle = { link = "Title" },
  MiniDepsTitleError = { link = "DiffDelete" },
  MiniDepsTitleSame = { link = "DiffChange" },
  MiniDepsTitleUpdate = { link = "DiffAdd" },
  MiniDiffOverAdd = { link = "DiffAdd" },
  MiniDiffOverChange = { link = "DiffText" },
  MiniDiffOverContext = { link = "DiffChange" },
  MiniDiffOverDelete = { link = "DiffDelete" },
  MiniDiffSignAdd = { link = "GreenSign" },
  MiniDiffSignChange = { link = "BlueSign" },
  MiniDiffSignDelete = { link = "RedSign" },
  MiniFilesBorder = { link = "FloatBorder" },
  MiniFilesBorderModified = { link = "DiagnosticFloatingWarn" },
  MiniFilesCursorLine = { link = "CursorLine" },
  MiniFilesDirectory = { link = "Directory" },
  MiniFilesNormal = { link = "NormalFloat" },
  MiniFilesTitle = { link = "FloatTitle" },
  MiniIndentscopeSymbol = { link = "Grey" },
  MiniJump = { link = "Search" },
  MiniJump2dDim = { link = "Comment" },
  MiniMapNormal = { link = "NormalFloat" },
  MiniMapSymbolCount = { link = "Special" },
  MiniMapSymbolLine = { link = "Title" },
  MiniMapSymbolView = { link = "Delimiter" },
  MiniNotifyBorder = { link = "FloatBorder" },
  MiniNotifyNormal = { link = "NormalFloat" },
  MiniNotifyTitle = { link = "FloatTitle" },
  MiniOperatorsExchangeFrom = { link = "IncSearch" },
  MiniPickBorder = { link = "FloatBorder" },
  MiniPickBorderBusy = { link = "DiagnosticFloatingWarn" },
  MiniPickBorderText = { link = "FloatTitle" },
  MiniPickHeader = { link = "DiagnosticFloatingHint" },
  MiniPickIconDirectory = { link = "Directory" },
  MiniPickIconFile = { link = "MiniPickNormal" },
  MiniPickMatchCurrent = { link = "CursorLine" },
  MiniPickMatchMarked = { link = "Visual" },
  MiniPickMatchRanges = { link = "DiagnosticFloatingHint" },
  MiniPickNormal = { link = "NormalFloat" },
  MiniPickPreviewLine = { link = "CursorLine" },
  MiniPickPreviewRegion = { link = "IncSearch" },
  MiniStarterFooter = { link = "Orange" },
  MiniStarterHeader = { link = "Yellow" },
  MiniStarterInactive = { link = "Comment" },
  MiniStarterItem = { link = "Normal" },
  MiniStarterItemBullet = { link = "Grey" },
  MiniStarterItemPrefix = { link = "Yellow" },
  MiniStarterQuery = { link = "Blue" },
  MiniStarterSection = { link = "Title" },
  MiniSurround = { link = "IncSearch" },

  -- https://github.com/simrat39/symbols-outline.nvim
  FocusedSymbol = { link = "NormalFloat" },

  -- https://github.com/pwntester/octo.nvim
  OctoViewer = syntax_entry(palette.bg0, palette.blue),
  OctoGreenFloat = syntax_entry(palette.green, palette.bg2),
  OctoRedFloat = syntax_entry(palette.red, palette.bg2),
  OctoPurpleFloat = syntax_entry(palette.purple, palette.bg2),
  OctoYellowFloat = syntax_entry(palette.yellow, palette.bg2),
  OctoBlueFloat = syntax_entry(palette.blue, palette.bg2),
  OctoGreyFloat = syntax_entry(palette.grey1, palette.bg2),
  OctoBubbleGreen = syntax_entry(palette.bg0, palette.green),
  OctoBubbleRed = syntax_entry(palette.bg0, palette.red),
  OctoBubblePurple = syntax_entry(palette.bg0, palette.purple),
  OctoBubbleYellow = syntax_entry(palette.bg0, palette.yellow),
  OctoBubbleBlue = syntax_entry(palette.bg0, palette.blue),
  OctoBubbleGrey = syntax_entry(palette.bg0, palette.grey1),
  OctoGreen = { link = "Green" },
  OctoRed = { link = "Red" },
  OctoPurple = { link = "Purple" },
  OctoYellow = { link = "Yellow" },
  OctoBlue = { link = "Blue" },
  OctoGrey = { link = "Grey" },
  OctoBubbleDelimiterGreen = { link = "Green" },
  OctoBubbleDelimiterRed = { link = "Red" },
  OctoBubbleDelimiterPurple = { link = "Purple" },
  OctoBubbleDelimiterYellow = { link = "Yellow" },
  OctoBubbleDelimiterBlue = { link = "Blue" },
  OctoBubbleDelimiterGrey = { link = "Grey" },

  -- mbbill/undotree
  UndotreeSavedBig = syntax_entry(palette.purple, palette.none, { styles.bold }),
  UndotreeNode = { link = "Orange" },
  UndotreeNodeCurrent = { link = "Red" },
  UndotreeSeq = { link = "Green" },
  UndotreeNext = { link = "Blue" },
  UndotreeTimeStamp = { link = "Grey" },
  UndotreeHead = { link = "Yellow" },
  UndotreeBranch = { link = "Yellow" },
  UndotreeCurrent = { link = "Aqua" },
  UndotreeSavedSmall = { link = "Purple" },

  -- glepnir/dashboard-nvim
  DashboardHeader = { link = "Yellow" },
  DashboardCenter = { link = "Green" },
  DashboardShortcut = { link = "Red" },
  DashboardFooter = { link = "Orange" },

  -- nvim-neotest/neotest
  NeotestPassed = { link = "GreenSign" },
  NeotestRunning = { link = "YellowSign" },
  NeotestFailed = { link = "RedSign" },
  NeotestSkipped = { link = "BlueSign" },
  NeotestNamespace = { link = "Purple" },
  NeotestFocused = syntax_entry(palette.yellow, palette.none),
  NeotestFile = { link = "Aqua" },
  NeotestDir = { link = "Directory" },
  NeotestBorder = syntax_entry(palette.blue, palette.none),
  NeotestIndent = { link = "NonText" },
  NeotestExpandMarker = syntax_entry(palette.bg5, palette.none),
  NeotestAdapterName = { link = "Title" },
  NeotestWinSelect = syntax_entry(palette.blue, palette.none),
  NeotestMarked = { link = "Orange" },
  NeotestTarget = { link = "Red" },

  -- akinsho/bufferline.nvim
  BufferLineIndicatorSelected = { link = "GreenSign" },

  -- williamboman/mason.nvim
  MasonHeader = syntax_entry(palette.bg0, palette.green, { styles.bold }),
  MasonHeaderSecondary = syntax_entry(palette.bg0, palette.orange, { styles.bold }),
  MasonHighlight = { link = "Green" },
  MasonHighlightSecondary = { link = "Yellow" },
  MasonHighlightBlock = syntax_entry(palette.bg0, palette.aqua),
  MasonHighlightBlockBold = syntax_entry(palette.bg0, palette.aqua, { styles.bold }),
  MasonHighlightBlockSecondary = syntax_entry(palette.bg0, palette.yellow),
  MasonHighlightBlockBoldSecondary = syntax_entry(palette.bg0, palette.yellow, { styles.bold }),
  MasonMuted = syntax_entry(palette.grey0, palette.none),
  MasonMutedBlock = syntax_entry(palette.bg0, palette.grey0),

  -- nullchilly/fsread.nvim
  FSPrefix = syntax_entry(palette.fg, transparency_respecting_colour(palette.bg0), { styles.bold }),
  FSSuffix = syntax_entry(palette.grey1, palette.none),
}

for group, opts in pairs(highlights) do
  vim.api.nvim_set_hl(0, group, opts)
end
