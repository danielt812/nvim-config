vim.cmd.highlight("clear")
vim.g.colors_name = "everforest"

-- stylua: ignore start
local palette = {
  bg_dim      = "#293136",
  bg0         = "#333c43",
  bg1         = "#3a464c",
  bg2         = "#434f55",
  bg3         = "#4d5960",
  bg4         = "#555f66",
  bg5         = "#5d6b66",
  bg_red      = "#4c3743",
  bg_green    = "#48584e",
  bg_blue     = "#3f5865",
  bg_yellow   = "#55544a",

  fg          = "#d3c6aa",
  red         = "#e67e80",
  orange      = "#e69875",
  yellow      = "#dbbc7f",
  green       = "#a7c080",
  aqua        = "#83c092",
  blue        = "#7fbbb3",
  purple      = "#d699b6",
  grey0       = "#7a8478",
  grey1       = "#859289",
  grey2       = "#9da9a0",
  statusline1 = "#a7c080",
  statusline2 = "#d3c6aa",
  statusline3 = "#e67e80",
  none        = "NONE",
}
-- stylua: ignore end

local highlights = {
  -- stylua: ignore start
  Normal   = { fg   = palette.fg, bg = palette.bg0 },
  NormalNC = { link = "Normal" },
  -- stylua: ignore end

  -- stylua: ignore start
  Conceal   = { fg = palette.bg5,  bg = palette.none },
  ErrorMsg  = { fg = palette.red,  bg = palette.none, bold = true, underline = true },
  ModeMsg   = { fg = palette.fg,   bg = palette.none, bold = true },
  NonText   = { fg = palette.bg4,  bg = palette.none },
  -- stylua: ignore end

  -- stylua: ignore start
  Pmenu             = { fg = palette.fg,   bg   = palette.bg2 },
  PmenuKind         = { fg = palette.fg,   bg   = palette.bg2 },
  PmenuKindSel      = { fg = palette.fg,   bg   = palette.bg2 },
  PmenuKindMatch    = { fg = palette.fg,   bg   = palette.bg2 },
  PmenuKindMatchSel = { fg = palette.fg,   bg   = palette.bg2 },
  PmenuSbar         = { fg = palette.none, bg   = palette.bg2 },
  PmenuSel          = { fg = palette.bg0,  bg   = palette.statusline1 },
  PmenuThumb        = { fg = palette.none, bg   = palette.grey0 },
  WildMenu          = { link = "PmenuSel" },
  -- stylua: ignore end

  -- stylua: ignore start
  DiffText   = { fg = palette.bg0,  bg = palette.blue },
  DiffAdd    = { fg = palette.none, bg = palette.bg_green },
  DiffChange = { fg = palette.none, bg = palette.bg_blue },
  DiffDelete = { fg = palette.none, bg = palette.bg_red },
  -- stylua: ignore end

  -- stylua: ignore start
  Search    = { fg = palette.bg0, bg = palette.green },
  IncSearch = { fg = palette.bg0, bg = palette.red },
  CurSearch = { link = "IncSearch" },
  -- stylua: ignore end

  -- stylua: ignore start
  ColorColumn  = { fg = palette.none, bg = palette.bg0 },
  CursorColumn = { fg = palette.none, bg = palette.bg0 },
  FoldColumn   = { fg = palette.bg5,  bg = palette.bg0 },
  SignColumn   = { fg = palette.fg,   bg = palette.bg0 },
  -- stylua: ignore end

-- stylua: ignore start
  Cursor       = { fg   = palette.none,  bg = palette.none, reverse = true },
  lCursor      = { fg   = palette.none,  bg = palette.none, reverse = true },
  CursorLineNr = { fg   = palette.grey1, bg = palette.bg0 },
  CursorLine   = { fg   = palette.none,  bg = palette.bg1 },
  CursorIM     = { link = "Cursor" },
  TermCursor   = { link = "Cursor" },
  TermCursorNC = { link = "Cursor" },

  LineNr       = { fg = palette.bg5, bg = palette.none },
  LineNrAbove  = { link = "LineNr" },
  LineNrBelow  = { link = "LineNr" },
  -- stylua: ignore end

  -- stylua: ignore start
  NormalFloat = { fg = palette.fg,    bg = palette.bg2 },
  FloatBorder = { fg = palette.grey1, bg = palette.bg2 },
  FloatTitle  = { fg = palette.grey1, bg = palette.bg2, bold = true },
  -- stylua: ignore end

  -- stylua: ignore start
  StatusLine   = { fg = palette.grey1, bg = palette.bg2 },
  StatusLineNC = { fg = palette.grey1, bg = palette.bg1 },
  -- stylua: ignore end

  -- stylua: ignore start
  SpellBad   = { fg = palette.red,  bg = palette.none, undercurl = true },
  SpellCap   = { fg = palette.blue, bg = palette.none, undercurl = true },
  SpellLocal = { fg = palette.aqua, bg = palette.none, undercurl = true },
  -- stylua: ignore end

  -- stylua: ignore start
  TabLine     = { fg = palette.grey2, bg = palette.bg1 },
  TabLineFill = { fg = palette.grey2, bg = palette.bg1 },
  TabLineSel  = { fg = palette.blue,  bg = palette.bg1 },
  -- stylua: ignore end

  Directory = { fg = palette.green, bg = palette.none },
  EndOfBuffer = { fg = palette.bg0, bg = palette.none },
  WinSeparator = { link = "VertSplit" },
  Folded = { fg = palette.grey1, bg = palette.bg1 },
  Substitute = { fg = palette.bg0, bg = palette.yellow },
  MatchParen = { fg = palette.none, bg = palette.bg4 },
  MoreMsg = { fg = palette.yellow, bg = palette.none, bold = true },
  Question = { fg = palette.yellow, bg = palette.none },
  QuickFixLine = { fg = palette.purple, bg = palette.none, bold = true },
  SpecialKey = { fg = palette.yellow, bg = palette.none },
  SpellRare = { fg = palette.purple, bg = palette.none, undercurl = true },
  Title = { fg = palette.orange, bg = palette.none, bold = true },
  Visual = { fg = palette.none, bg = palette.bg3 },
  VisualNOS = { fg = palette.none, bg = palette.bg3 },
  WarningMsg = { fg = palette.yellow, bg = palette.none, bold = true },
  Whitespace = { fg = palette.bg4, bg = palette.none },
  WinBar = { fg = palette.grey1, bg = palette.bg2, bold = true },
  WinBarNC = { fg = palette.grey1, bg = palette.bg1 },
  Terminal = { fg = palette.fg, bg = palette.bg0 },
  ToolbarLine = { fg = palette.fg, bg = palette.bg2 },

  StatusLineTerm = { fg = palette.grey1, bg = palette.bg1 },
  StatusLineTermNC = { fg = palette.grey1, bg = palette.bg0 },
  VertSplit = { fg = palette.bg4, bg = palette.none },

  Debug = { fg = palette.orange, bg = palette.none },
  debugPC = { fg = palette.bg0, bg = palette.green },
  debugBreakpoint = { fg = palette.bg0, bg = palette.red },
  ToolbarButton = { fg = palette.bg0, bg = palette.green },

  DiagnosticFloatingError = { link = "ErrorFloat" },
  DiagnosticFloatingWarn = { link = "WarningFloat" },
  DiagnosticFloatingInfo = { link = "InfoFloat" },
  DiagnosticFloatingHint = { link = "HintFloat" },
  DiagnosticError = { fg = palette.red, bg = palette.none },
  DiagnosticWarn = { fg = palette.yellow, bg = palette.none },
  DiagnosticInfo = { fg = palette.blue, bg = palette.none },
  DiagnosticHint = { fg = palette.green, bg = palette.none },
  DiagnosticUnnecessary = { fg = palette.grey1, bg = palette.none },
  DiagnosticVirtualTextError = { link = "VirtualTextError" },
  DiagnosticVirtualTextWarn = { link = "VirtualTextWarning" },
  DiagnosticVirtualTextInfo = { link = "VirtualTextInfo" },
  DiagnosticVirtualTextHint = { link = "VirtualTextHint" },
  -- DiagnosticUnderlineError = { fg = palette.red, bg = palette.none, undercurl = true },
  -- DiagnosticUnderlineWarn = { fg = palette.yellow, bg = palette.none, undercurl = true },
  -- DiagnosticUnderlineInfo = { fg = palette.blue, bg = palette.none, undercurl = true },
  -- DiagnosticUnderlineHint = { fg = palette.green, bg = palette.none, undercurl = true },
  DiagnosticSignError = { link = "Red" },
  DiagnosticSignWarn = { link = "Yellow" },
  DiagnosticSignInfo = { link = "Blue" },
  DiagnosticSignHint = { link = "Green" },

  -- stylua: ignore start
  LspDiagnosticsFloatingError          = { link = "DiagnosticFloatingError" },
  LspDiagnosticsFloatingWarning        = { link = "DiagnosticFloatingWarn" },
  LspDiagnosticsFloatingInformation    = { link = "DiagnosticFloatingInfo" },
  LspDiagnosticsFloatingHint           = { link = "DiagnosticFloatingHint" },
  LspDiagnosticsDefaultError           = { link = "DiagnosticError" },
  LspDiagnosticsDefaultWarning         = { link = "DiagnosticWarn" },
  LspDiagnosticsDefaultInformation     = { link = "DiagnosticInfo" },
  LspDiagnosticsDefaultHint            = { link = "DiagnosticHint" },
  LspDiagnosticsVirtualTextError       = { link = "DiagnosticVirtualTextError" },
  LspDiagnosticsVirtualTextWarning     = { link = "DiagnosticVirtualTextWarn" },
  LspDiagnosticsVirtualTextInformation = { link = "DiagnosticVirtualTextInfo" },
  LspDiagnosticsVirtualTextHint        = { link = "DiagnosticVirtualTextHint" },
  LspDiagnosticsUnderlineError         = { link = "DiagnosticUnderlineError" },
  LspDiagnosticsUnderlineWarning       = { link = "DiagnosticUnderlineWarn" },
  LspDiagnosticsUnderlineInformation   = { link = "DiagnosticUnderlineInfo" },
  LspDiagnosticsUnderlineHint          = { link = "DiagnosticUnderlineHint" },
  LspDiagnosticsSignError              = { link = "DiagnosticSignError" },
  LspDiagnosticsSignWarning            = { link = "DiagnosticSignWarn" },
  LspDiagnosticsSignInformation        = { link = "DiagnosticSignInfo" },
  LspDiagnosticsSignHint               = { link = "DiagnosticSignHint" },
  LspInlayHint                         = { link = "InlayHints" },
  LspReferenceText                     = { link = "CurrentWord" },
  LspReferenceRead                     = { link = "CurrentWord" },
  LspReferenceWrite                    = { link = "CurrentWord" },
  LspCodeLens                          = { link = "VirtualTextInfo" },
  LspCodeLensSeparator                 = { link = "VirtualTextHint" },
  LspSignatureActiveParameter          = { link = "Search" },
  -- stylua: ignore end

  -- Health
  -- stylua: ignore start
  healthError   = { link = "Red" },
  healthSuccess = { link = "Green" },
  healthWarning = { link = "Yellow" },
  -- stylua: ignore end

  -- stylua: ignore start
  Boolean      = { fg = palette.purple, bg = palette.none },
  Number       = { fg = palette.purple, bg = palette.none },
  Float        = { fg = palette.purple, bg = palette.none },
  PreProc      = { fg = palette.purple, bg = palette.none },
  PreCondit    = { fg = palette.purple, bg = palette.none },
  Include      = { fg = palette.purple, bg = palette.none },
  Define       = { fg = palette.purple, bg = palette.none },
  Conditional  = { fg = palette.red,    bg = palette.none },
  Repeat       = { fg = palette.red,    bg = palette.none },
  Keyword      = { fg = palette.red,    bg = palette.none },
  Typedef      = { fg = palette.red,    bg = palette.none },
  Exception    = { fg = palette.red,    bg = palette.none },
  Statement    = { fg = palette.red,    bg = palette.none },
  Error        = { fg = palette.red,    bg = palette.none },
  StorageClass = { fg = palette.orange, bg = palette.none },
  Tag          = { fg = palette.orange, bg = palette.none },
  Label        = { fg = palette.orange, bg = palette.none },
  Structure    = { fg = palette.orange, bg = palette.none },
  Operator     = { fg = palette.orange, bg = palette.none },
  Special      = { fg = palette.yellow, bg = palette.none },
  SpecialChar  = { fg = palette.yellow, bg = palette.none },
  Type         = { fg = palette.yellow, bg = palette.none },
  Function     = { fg = palette.green,  bg = palette.none },
  String       = { fg = palette.green,  bg = palette.none },
  Character    = { fg = palette.green,  bg = palette.none },
  Constant     = { fg = palette.aqua,   bg = palette.none },
  Macro        = { fg = palette.aqua,   bg = palette.none },
  Identifier   = { fg = palette.blue,   bg = palette.none },
  -- stylua: ignore end

  -- stylua: ignore start
  Comment        = { fg   = palette.grey1, bg = palette.none, italic = true },
  SpecialComment = { link = "Comment"},
  -- Todo           = { fg   = palette.bg0,   bg = palette.blue, bold   = true },
  -- stylua: ignore end

  Delimiter = { fg = palette.fg, bg = palette.none },
  Ignore = { fg = palette.grey1, bg = palette.none },
  Underlined = { fg = palette.none, bg = palette.none, underline = true },

  -- Predefined highlight groups
  -- stylua: ignore start
  Fg     = { fg = palette.fg,     bg = palette.none },
  Grey   = { fg = palette.grey1,  bg = palette.none },
  Red    = { fg = palette.red,    bg = palette.none },
  Orange = { fg = palette.orange, bg = palette.none },
  Yellow = { fg = palette.yellow, bg = palette.none },
  Green  = { fg = palette.green,  bg = palette.none },
  Aqua   = { fg = palette.aqua,   bg = palette.none },
  Blue   = { fg = palette.blue,   bg = palette.none },
  Purple = { fg = palette.purple, bg = palette.none },
  -- stylua: ignore end

  -- stylua: ignore start
  BgRed    = { bg = palette.bg_red },
  BgGreen  = { bg = palette.bg_green },
  BgBlue   = { bg = palette.bg_blue },
  BgYellow = { bg = palette.bg_yellow },
  -- stylua: ignore end

  -- stylua: ignore start
  Added   = { link = "Green" },
  Removed = { link = "Red" },
  Changed = { link = "Blue" },
  -- stylua: ignore end

  -- Configuration based on `diagnostic_text_highlight` option
  -- stylua: ignore start
  ErrorText   = { fg = palette.none, bg = palette.none, undercurl = true },
  WarningText = { fg = palette.none, bg = palette.none, undercurl = true },
  InfoText    = { fg = palette.none, bg = palette.none, undercurl = true },
  HintText    = { fg = palette.none, bg = palette.none, undercurl = true },
  -- stylua: ignore end

  -- stylua: ignore start
  VirtualTextWarning = { link = "Yellow" },
  VirtualTextError   = { link = "Red" },
  VirtualTextInfo    = { link = "Blue" },
  VirtualTextHint    = { link = "Green" },
  -- stylua: ignore end

  -- Diagnostic text inherits the background of the floating window, which is Neovim's default.
  -- stylua: ignore start
  ErrorFloat   = { fg = palette.red,    bg = palette.none },
  WarningFloat = { fg = palette.yellow, bg = palette.none },
  InfoFloat    = { fg = palette.blue,   bg = palette.none },
  HintFloat    = { fg = palette.green,  bg = palette.none },
  CurrentWord  = { fg = palette.none,   bg = palette.none, bold = true },
  -- stylua: ignore end

  -- Treesitter
  TSStrong = { fg = palette.none, bg = palette.none, bold = true },
  TSEmphasis = { fg = palette.none, bg = palette.none, italic = true },
  TSUnderline = { fg = palette.none, bg = palette.none, underline = true },
  TSStrike = { fg = palette.none, bg = palette.none, strikethrough = true },
  TSNote = { fg = palette.bg0, bg = palette.green, bold = true },
  TSWarning = { fg = palette.bg0, bg = palette.yellow, bold = true },
  TSDanger = { fg = palette.bg0, bg = palette.red, bold = true },
  TSAnnotation = { link = "Purple" },
  TSAttribute = { link = "Purple" },
  TSBoolean = { link = "Purple" },
  TSCharacter = { link = "Aqua" },
  TSCharacterSpecial = { link = "SpecialChar" },
  TSComment = { link = "Comment" },
  TSConditional = { link = "Red" },
  TSConstBuiltin = { link = "Purple" },
  TSConstMacro = { link = "Purple" },
  TSConstant = { link = "Constant" },
  TSConstructor = { link = "Green" },
  TSDebug = { link = "Debug" },
  TSDefine = { link = "Define" },
  TSEnvironment = { link = "Macro" },
  TSEnvironmentName = { link = "Type" },
  TSError = { link = "Error" },
  TSException = { link = "Red" },
  TSField = { link = "Blue" },
  TSFloat = { link = "Purple" },
  TSFuncBuiltin = { link = "Green" },
  TSFuncMacro = { link = "Green" },
  TSFunction = { link = "Green" },
  TSFunctionCall = { link = "Green" },
  TSInclude = { link = "Red" },
  TSKeyword = { link = "Red" },
  TSKeywordFunction = { link = "Red" },
  TSKeywordOperator = { link = "Orange" },
  TSKeywordReturn = { link = "Red" },
  TSLabel = { link = "Orange" },
  TSLiteral = { link = "String" },
  TSMath = { link = "Blue" },
  TSMethod = { link = "Green" },
  TSMethodCall = { link = "Green" },
  TSModuleInfoGood = { link = "Green" },
  TSModuleInfoBad = { link = "Red" },
  TSNamespace = { link = "Yellow" },
  TSNone = { link = "Fg" },
  TSNumber = { link = "Purple" },
  TSOperator = { link = "Orange" },
  TSParameter = { link = "Fg" },
  TSParameterReference = { link = "Fg" },
  TSPreProc = { link = "PreProc" },
  TSProperty = { link = "Blue" },
  TSPunctBracket = { link = "Fg" },
  TSPunctDelimiter = { link = "Grey" },
  TSPunctSpecial = { link = "Blue" },
  TSRepeat = { link = "Red" },
  TSStorageClass = { link = "Orange" },
  TSStorageClassLifetime = { link = "Orange" },
  TSString = { link = "Aqua" },
  TSStringEscape = { link = "Green" },
  TSStringRegex = { link = "Green" },
  TSStringSpecial = { link = "SpecialChar" },
  TSSymbol = { link = "Aqua" },
  TSTag = { link = "Orange" },
  TSTagAttribute = { link = "Green" },
  TSTagDelimiter = { link = "Green" },
  TSText = { link = "Green" },
  TSTextReference = { link = "Constant" },
  TSTitle = { link = "Title" },
  TSTodo = { link = "Todo" },
  TSType = { link = "Yellow" },
  TSTypeBuiltin = { link = "Yellow" },
  TSTypeDefinition = { link = "Yellow" },
  TSTypeQualifier = { link = "Orange" },
  TSURI = { fg = palette.blue, bg = palette.none, underline = true },
  TSVariable = { link = "Fg" },
  TSVariableBuiltin = { link = "Purple" },

  javascriptTSInclude = { link = "Purple" },
  typescriptTSInclude = { link = "Purple" },
  tsxTSConstructor = { link = "TSType" },
  luaTSConstructor = { link = "luaBraces" },
  goTSInclude = { link = "Purple" },
  goTSNamespace = { link = "Fg" },
  goTSConstBuiltin = { link = "Aqua" },
  htmlTSText = { link = "TSNone" },
  jsonKeyword = { link = "Green" },
  jsonString = { link = "Fg" },
  jsonQuote = { link = "Grey" },
  jsonTSLabel = { link = "jsonKeyword" },
  jsonTSString = { link = "jsonString" },
  jsonTSStringEscape = { link = "SpecialChar" },
  yamlBlockMappingKey = { link = "Green" },
  yamlString = { link = "Fg" },
  yamlConstant = { link = "Orange" },
  yamlKeyValueDelimiter = { link = "Grey" },
  yamlTSField = { link = "yamlBlockMappingKey" },
  yamlTSString = { link = "yamlString" },
  yamlTSStringEscape = { link = "SpecialChar" },
  yamlTSBoolean = { link = "yamlConstant" },
  yamlTSConstBuiltin = { link = "yamlConstant" },
  tomlKey = { link = "Green" },
  tomlString = { link = "Fg" },
  tomlTSProperty = { link = "tomlKey" },
  tomlTSString = { link = "tomlString" },

  -- New Treesitter highlights
  ["@annotation"] = { link = "TSAnnotation" },
  ["@attribute"] = { link = "TSAttribute" },
  ["@boolean"] = { link = "TSBoolean" },
  ["@boolean.yaml"] = { link = "yamlTSBoolean" },
  ["@character"] = { link = "TSCharacter" },
  ["@character.special"] = { link = "TSCharacterSpecial" },
  -- ["@comment"] = { link = "TSComment" },
  -- ["@comment.error"] = { link = "TSDanger" },
  -- ["@comment.note"] = { link = "TSNote" },
  -- ["@comment.todo"] = { link = "TSTodo" },
  -- ["@comment.warning"] = { link = "TSWarning" },
  ["@conceal"] = { link = "Grey" },
  ["@conditional"] = { link = "TSConditional" },
  ["@constant"] = { link = "TSConstant" },
  ["@constant.builtin"] = { link = "TSConstBuiltin" },
  ["@constant.builtin.go"] = { link = "goTSConstBuiltin" },
  ["@constant.builtin.yaml"] = { link = "yamlTSConstBuiltin" },
  ["@constant.macro"] = { link = "TSConstMacro" },
  ["@constant.regex"] = { link = "TSConstBuiltin" },
  ["@constructor"] = { link = "TSConstructor" },
  ["@constructor.lua"] = { link = "luaTSConstructor" },
  ["@constructor.tsx"] = { link = "tsxTSConstructor" },
  ["@debug"] = { link = "TSDebug" },
  ["@define"] = { link = "TSDefine" },
  ["@diff.delta"] = { link = "diffChanged" },
  ["@diff.minus"] = { link = "diffRemoved" },
  ["@diff.plus"] = { link = "diffAdded" },
  ["@error"] = { link = "TSError" }, -- This has been removed from nvim-treesitter
  ["@exception"] = { link = "TSException" },
  ["@field"] = { link = "TSField" },
  ["@field.yaml"] = { link = "yamlTSField" },
  ["@float"] = { link = "TSFloat" },
  ["@function"] = { link = "TSFunction" },
  ["@function.builtin"] = { link = "TSFuncBuiltin" },
  ["@function.call"] = { link = "TSFunctionCall" },
  ["@function.macro"] = { link = "TSFuncMacro" },
  ["@function.method"] = { link = "TSMethod" },
  ["@function.method.call"] = { link = "TSMethodCall" },
  ["@include"] = { link = "TSInclude" },
  ["@include.go"] = { link = "goTSInclude" },
  ["@include.javascript"] = { link = "javascriptTSInclude" },
  ["@include.typescript"] = { link = "typescriptTSInclude" },
  ["@keyword"] = { link = "TSKeyword" },
  ["@keyword.conditional"] = { link = "TSConditional" },
  ["@keyword.debug"] = { link = "TSDebug" },
  ["@keyword.directive"] = { link = "TSPreProc" },
  ["@keyword.directive.define"] = { link = "TSDefine" },
  ["@keyword.exception"] = { link = "TSException" },
  ["@keyword.function"] = { link = "TSKeywordFunction" },
  ["@keyword.import"] = { link = "TSInclude" },
  ["@keyword.import.go"] = { link = "goTSInclude" },
  ["@keyword.import.javascript"] = { link = "javascriptTSInclude" },
  ["@keyword.import.typescript"] = { link = "typescriptTSInclude" },
  ["@keyword.modifier"] = { link = "TSTypeQualifier" },
  ["@keyword.operator"] = { link = "TSKeywordOperator" },
  ["@keyword.repeat"] = { link = "TSRepeat" },
  ["@keyword.return"] = { link = "TSKeywordReturn" },
  ["@keyword.storage"] = { link = "TSStorageClass" },
  ["@label"] = { link = "TSLabel" },
  ["@label.json"] = { link = "jsonTSLabel" },
  ["@markup.emphasis"] = { link = "TSEmphasis" },
  ["@markup.environment"] = { link = "TSEnvironment" },
  ["@markup.environment.name"] = { link = "TSEnvironmentName" },
  ["@markup.heading"] = { link = "TSTitle" },
  ["@markup.heading.1.markdown"] = { link = "markdownH1" },
  ["@markup.heading.2.markdown"] = { link = "markdownH2" },
  ["@markup.heading.3.markdown"] = { link = "markdownH3" },
  ["@markup.heading.4.markdown"] = { link = "markdownH4" },
  ["@markup.heading.5.markdown"] = { link = "markdownH5" },
  ["@markup.heading.6.markdown"] = { link = "markdownH6" },
  ["@markup.heading.1.marker.markdown"] = { link = "@conceal" },
  ["@markup.heading.2.marker.markdown"] = { link = "@conceal" },
  ["@markup.heading.3.marker.markdown"] = { link = "@conceal" },
  ["@markup.heading.4.marker.markdown"] = { link = "@conceal" },
  ["@markup.heading.5.marker.markdown"] = { link = "@conceal" },
  ["@markup.heading.6.marker.markdown"] = { link = "@conceal" },
  ["@markup.italic"] = { link = "TSEmphasis" },
  ["@markup.link"] = { link = "TSTextReference" },
  ["@markup.link.label"] = { link = "TSStringSpecial" },
  ["@markup.link.url"] = { link = "TSURI" },
  ["@markup.list"] = { link = "TSPunctSpecial" },
  ["@markup.list.checked"] = { link = "Green" },
  ["@markup.list.unchecked"] = { link = "Ignore" },
  ["@markup.math"] = { link = "TSMath" },
  ["@markup.quote"] = { link = "Grey" },
  ["@markup.raw"] = { link = "TSLiteral" },
  ["@markup.strike"] = { link = "TSStrike" },
  ["@markup.strong"] = { link = "TSStrong" },
  ["@markup.underline"] = { link = "TSUnderline" },
  ["@math"] = { link = "TSMath" },
  ["@method"] = { link = "TSMethod" },
  ["@method.call"] = { link = "TSMethodCall" },
  ["@module"] = { link = "TSNamespace" },
  ["@module.go"] = { link = "goTSNamespace" },
  ["@namespace"] = { link = "TSNamespace" },
  ["@namespace.go"] = { link = "goTSNamespace" },
  ["@none"] = { link = "TSNone" },
  ["@number"] = { link = "TSNumber" },
  ["@number.float"] = { link = "TSFloat" },
  ["@operator"] = { link = "TSOperator" },
  ["@parameter"] = { link = "TSParameter" },
  ["@parameter.reference"] = { link = "TSParameterReference" },
  ["@preproc"] = { link = "TSPreProc" },
  ["@property"] = { link = "TSProperty" },
  ["@property.toml"] = { link = "tomlTSProperty" },
  ["@punctuation.bracket"] = { link = "TSPunctBracket" },
  ["@punctuation.bracket.regex"] = { link = "TSStringRegex" },
  ["@punctuation.delimiter"] = { link = "TSPunctDelimiter" },
  ["@punctuation.special"] = { link = "TSPunctSpecial" },
  ["@punctuation.special.typescript"] = { link = "TSOperator" },
  ["@repeat"] = { link = "TSRepeat" },
  ["@storageclass"] = { link = "TSStorageClass" },
  ["@storageclass.lifetime"] = { link = "TSStorageClassLifetime" },
  ["@strike"] = { link = "TSStrike" },
  ["@string"] = { link = "TSString" },
  ["@string.escape"] = { link = "TSStringEscape" },
  ["@string.escape.json"] = { link = "jsonTSStringEscape" },
  ["@string.escape.yaml"] = { link = "yamlTSStringEscape" },
  ["@string.json"] = { link = "jsonTSString" },
  ["@string.regex"] = { link = "TSStringRegex" },
  ["@string.regexp"] = { link = "TSStringRegex" },
  ["@string.special"] = { link = "TSStringSpecial" },
  ["@string.special.symbol"] = { link = "TSSymbol" },
  ["@string.special.url"] = { link = "TSURI" },
  ["@string.toml"] = { link = "tomlTSString" },
  ["@string.yaml"] = { link = "yamlTSString" },
  ["@symbol"] = { link = "TSSymbol" },
  ["@tag"] = { link = "TSTag" },
  ["@tag.attribute"] = { link = "TSTagAttribute" },
  ["@tag.delimiter"] = { link = "TSTagDelimiter" },
  ["@text"] = { link = "TSText" },
  ["@text.danger"] = { link = "TSDanger" },
  ["@text.diff.add"] = { link = "diffAdded" },
  ["@text.diff.delete"] = { link = "diffRemoved" },
  ["@text.emphasis"] = { link = "TSEmphasis" },
  ["@text.environment"] = { link = "TSEnvironment" },
  ["@text.environment.name"] = { link = "TSEnvironmentName" },
  ["@text.gitcommit"] = { link = "TSNone" },
  ["@text.html"] = { link = "htmlTSText" },
  ["@text.literal"] = { link = "TSLiteral" },
  ["@text.math"] = { link = "TSMath" },
  ["@text.note"] = { link = "TSNote" },
  ["@text.reference"] = { link = "TSTextReference" },
  ["@text.strike"] = { link = "TSStrike" },
  ["@text.strong"] = { link = "TSStrong" },
  ["@text.title"] = { link = "TSTitle" },
  ["@text.todo"] = { link = "TSTodo" },
  ["@text.todo.checked"] = { link = "Green" },
  ["@text.todo.unchecked"] = { link = "Ignore" },
  ["@text.underline"] = { link = "TSUnderline" },
  ["@text.uri"] = { link = "TSURI" },
  ["@text.warning"] = { link = "TSWarning" },
  ["@todo"] = { link = "TSTodo" },
  ["@type"] = { link = "TSType" },
  ["@type.builtin"] = { link = "TSTypeBuiltin" },
  ["@type.definition"] = { link = "TSTypeDefinition" },
  ["@type.qualifier"] = { link = "TSTypeQualifier" },
  ["@uri"] = { link = "TSURI" },
  ["@variable"] = { link = "TSVariable" },
  ["@variable.builtin"] = { link = "TSVariableBuiltin" },
  ["@variable.member"] = { link = "TSField" },
  ["@variable.member.yaml"] = { link = "yamlTSField" },
  ["@variable.parameter"] = { link = "TSParameter" },

  -- LSP Semantic token highlights
  ["@lsp.type.boolean"] = { link = "@boolean" },
  ["@lsp.type.builtinConstant"] = { link = "@constant.builtin" },
  ["@lsp.type.builtinType"] = { link = "@type.builtin" },
  ["@lsp.type.class"] = { link = "@type" },
  ["@lsp.type.comment"] = { link = "@comment" },
  ["@lsp.type.decorator"] = { link = "@function" },
  ["@lsp.type.derive"] = { link = "@constructor" },
  ["@lsp.type.deriveHelper"] = { link = "@attribute" },
  ["@lsp.type.enum"] = { link = "@type" },
  ["@lsp.type.enumMember"] = { link = "@property" },
  ["@lsp.type.escapeSequence"] = { link = "@string.escape" },
  ["@lsp.type.formatSpecifier"] = { link = "@punctuation.special" },
  ["@lsp.type.function"] = { link = "@function" },
  ["@lsp.type.generic"] = { link = "@text" },
  ["@lsp.type.interface"] = { link = "@type" },
  ["@lsp.type.keyword"] = { link = "@keyword" },
  ["@lsp.type.lifetime"] = { link = "@storageclass.lifetime" },
  ["@lsp.type.macro"] = { link = "@constant.macro" },
  ["@lsp.type.magicFunction"] = { link = "@function.builtin" },
  ["@lsp.type.method"] = { link = "@method" },
  ["@lsp.type.modifier"] = { link = "@type.qualifier" },
  ["@lsp.type.namespace"] = { link = "@namespace" },
  ["@lsp.type.namespace.go"] = { link = "@namespace.go" },
  ["@lsp.type.number"] = { link = "@number" },
  ["@lsp.type.operator"] = { link = "@operator" },
  ["@lsp.type.parameter"] = { link = "@parameter" },
  ["@lsp.type.property"] = { link = "@property" },
  ["@lsp.type.regexp"] = { link = "@string.regex" },
  ["@lsp.type.selfKeyword"] = { link = "@variable.builtin" },
  ["@lsp.type.selfTypeKeyword"] = { link = "@type" },
  ["@lsp.type.string"] = { link = "@string" },
  ["@lsp.type.struct"] = { link = "@type" },
  ["@lsp.type.type"] = { link = "@type" },
  ["@lsp.type.typeAlias"] = { link = "@type.definition" },
  ["@lsp.type.typeParameter"] = { link = "@type.definition" },
  ["@lsp.type.variable"] = { link = "@variable" },
  ["@lsp.type.variable.lua"] = { fg = palette.none, bg = palette.none },
  ["@lsp.typemod.class.defaultLibrary"] = { link = "@type.builtin" },
  ["@lsp.typemod.enum.defaultLibrary"] = { link = "@type.builtin" },
  ["@lsp.typemod.enumMember.defaultLibrary"] = { link = "@constant.builtin" },
  ["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
  ["@lsp.typemod.function.readonly"] = { link = "@method" },
  ["@lsp.typemod.keyword.async"] = { link = "@keyword" },
  ["@lsp.typemod.keyword.injected"] = { link = "@keyword" },
  ["@lsp.typemod.macro.defaultLibrary"] = { link = "@function.builtin" },
  ["@lsp.typemod.method.defaultLibrary"] = { link = "@function.builtin" },
  ["@lsp.typemod.method.readonly"] = { link = "@method" },
  ["@lsp.typemod.operator.injected"] = { link = "@operator" },
  ["@lsp.typemod.string.injected"] = { link = "@string" },
  ["@lsp.typemod.struct.defaultLibrary"] = { link = "@type.builtin" },
  ["@lsp.typemod.type.defaultLibrary"] = { link = "@type.builtin" },
  ["@lsp.typemod.typeAlias.defaultLibrary"] = { link = "@type.builtin" },
  ["@lsp.typemod.variable.callable"] = { link = "@function" },
  ["@lsp.typemod.variable.constant.rust"] = { link = "@constant" },
  ["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
  ["@lsp.typemod.variable.defaultLibrary.go"] = { link = "@constant.builtin.go" },
  ["@lsp.typemod.variable.defaultLibrary.javascript"] = { link = "@constant.builtin" },
  ["@lsp.typemod.variable.defaultLibrary.javascriptreact"] = { link = "@constant.builtin" },
  ["@lsp.typemod.variable.defaultLibrary.typescript"] = { link = "@constant.builtin" },
  ["@lsp.typemod.variable.defaultLibrary.typescriptreact"] = { link = "@constant.builtin" },
  ["@lsp.typemod.variable.injected"] = { link = "@variable" },
  ["@lsp.typemod.variable.static"] = { link = "Red" },

  -- HiPhish/rainbow-delimiters
  -- stylua: ignore start
  RainbowDelimiterRed    = { link = "Red" },
  RainbowDelimiterOrange = { link = "Orange" },
  RainbowDelimiterYellow = { link = "Yellow" },
  RainbowDelimiterGreen  = { link = "Green" },
  RainbowDelimiterCyan   = { link = "Aqua" },
  RainbowDelimiterBlue   = { link = "Blue" },
  RainbowDelimiterViolet = { link = "Purple" },
  -- stylua: ignore end

  -- Diff
  diffAdded = { link = "Added" },
  diffRemoved = { link = "Removed" },
  diffChanged = { link = "Changed" },
  diffOldFile = { link = "Yellow" },
  diffNewFile = { link = "Orange" },
  diffFile = { link = "Aqua" },
  diffLine = { link = "Grey" },
  diffIndexLine = { link = "Purple" },

  -- Eyeliner
  -- stylua: ignore start
  EyelinerPrimary   = { link = "Blue" },
  EyelinerSecondary = { link = "Orange" },
  -- stylua: ignore end

  BlinkCmpLabelMatch = { fg = palette.green, bg = palette.none, bold = true },

  -- SmiteshP/nvim-navic
  -- stylua: ignore start
  NavicIconsFile          = { link = "Fg" },
  NavicIconsModule        = { link = "Yellow" },
  NavicIconsNamespace     = { link = "Fg" },
  NavicIconsPackage       = { link = "Fg" },
  NavicIconsClass         = { link = "Orange" },
  NavicIconsMethod        = { link = "Blue" },
  NavicIconsProperty      = { link = "Green" },
  NavicIconsField         = { link = "Green" },
  NavicIconsConstructor   = { link = "Orange" },
  NavicIconsEnum          = { link = "Orange" },
  NavicIconsInterface     = { link = "Orange" },
  NavicIconsFunction      = { link = "Blue" },
  NavicIconsVariable      = { link = "Purple" },
  NavicIconsConstant      = { link = "Purple" },
  NavicIconsString        = { link = "Green" },
  NavicIconsNumber        = { link = "Orange" },
  NavicIconsBoolean       = { link = "Orange" },
  NavicIconsArray         = { link = "Orange" },
  NavicIconsObject        = { link = "Orange" },
  NavicIconsKey           = { link = "Purple" },
  NavicIconsKeyword       = { link = "Purple" },
  NavicIconsNull          = { link = "Orange" },
  NavicIconsEnumMember    = { link = "Green" },
  NavicIconsStruct        = { link = "Orange" },
  NavicIconsEvent         = { link = "Orange" },
  NavicIconsOperator      = { link = "Fg" },
  NavicIconsTypeParameter = { link = "Green" },
  NavicText               = { link = "Fg" },
  NavicSeparator          = { link = "Grey" },
  -- stylua: ignore end

  -- rcarriga/nvim-dap-ui
  DapUIModifiedValue = { fg = palette.blue, bg = palette.none, bold = true },
  DapUIBreakpointsCurrentLine = { fg = palette.blue, bg = palette.none, bold = true },
  DapUIPlayPause = { fg = palette.green, bg = palette.bg2 },
  DapUIRestart = { fg = palette.green, bg = palette.bg2 },
  DapUIStop = { fg = palette.red, bg = palette.bg2 },
  DapUIUnavailable = { fg = palette.grey1, bg = palette.bg2 },
  DapUIStepOver = { fg = palette.blue, bg = palette.bg2 },
  DapUIStepInto = { fg = palette.blue, bg = palette.bg2 },
  DapUIStepBack = { fg = palette.blue, bg = palette.bg2 },
  DapUIStepOut = { fg = palette.blue, bg = palette.bg2 },
  DapUIScope = { link = "Blue" },
  DapUIType = { link = "Purple" },
  DapUIDecoration = { link = "Blue" },
  DapUIThread = { link = "Green" },
  DapUIStoppedThread = { link = "Blue" },
  DapUISource = { link = "Purple" },
  DapUILineNumber = { link = "Blue" },
  DapUIFloatBorder = { link = "Blue" },
  DapUIWatchesEmpty = { link = "Red" },
  DapUIWatchesValue = { link = "Green" },
  DapUIWatchesError = { link = "Red" },
  DapUIBreakpointsPath = { link = "Blue" },
  DapUIBreakpointsInfo = { link = "Green" },

  -- echasnovski/mini.nvim
  MiniAnimateCursor = { fg = palette.none, bg = palette.none, reverse = true, nocombine = true },
  MiniAnimateNormalFloat = { link = "NormalFloat" },

  MiniFilesFile = { fg = palette.fg, bg = palette.none },
  MiniFilesTitleFocused = { fg = palette.green, bg = palette.bg2, bold = true },

  MiniIconsAzure = { fg = palette.blue, bg = palette.none },
  MiniIconsBlue = { fg = palette.blue, bg = palette.none },
  MiniIconsCyan = { fg = palette.aqua, bg = palette.none },
  MiniIconsGreen = { fg = palette.green, bg = palette.none },
  MiniIconsGrey = { fg = palette.grey2, bg = palette.none },
  MiniIconsOrange = { fg = palette.orange, bg = palette.none },
  MiniIconsPurple = { fg = palette.purple, bg = palette.none },
  MiniIconsRed = { fg = palette.red, bg = palette.none },
  MiniIconsYellow = { fg = palette.yellow, bg = palette.none },

  MiniIndentscopePrefix = { fg = palette.none, bg = palette.none, nocombine = true },

  MiniJump2dSpot = { fg = palette.orange, bg = palette.none, bold = true, nocombine = true },
  MiniJump2dSpotAhead = { fg = palette.aqua, bg = palette.none, nocombine = true },
  MiniJump2dSpotUnique = { fg = palette.yellow, bg = palette.none, bold = true, nocombine = true },

  MiniPickPrompt = { fg = palette.blue, bg = palette.bg2 },
  MiniStarterCurrent = { fg = palette.none, bg = palette.none, nocombine = true },

  -- stylua: ignore start
  MiniStatuslineDevinfo     = { fg = palette.grey2,  bg = palette.bg1 },
  MiniStatuslineFilename    = { fg = palette.grey1,  bg = palette.bg2 },
  MiniStatuslineModeCommand = { fg = palette.bg0,    bg = palette.aqua },
  MiniStatuslineModeInsert  = { fg = palette.bg0,    bg = palette.statusline2 },
  MiniStatuslineModeNormal  = { fg = palette.bg0,    bg = palette.statusline1 },
  MiniStatuslineModeOther   = { fg = palette.bg0,    bg = palette.purple, bold = true },
  MiniStatuslineModeReplace = { fg = palette.bg0,    bg = palette.orange, bold = true },
  MiniStatuslineModeVisual  = { fg = palette.bg0,    bg = palette.red   , bold = true },
  MiniStatuslineDiffAdd     = { fg = palette.green,  bg = palette.bg1 },
  MiniStatuslineDiffChange  = { fg = palette.blue,   bg = palette.bg1 },
  MiniStatuslineDiffDelete  = { fg = palette.red,    bg = palette.bg1 },
  MiniStatuslineDiagError   = { fg = palette.red,    bg = palette.bg1 },
  MiniStatuslineDiagWarn    = { fg = palette.yellow, bg = palette.bg1 },
  MiniStatuslineDiagInfo    = { fg = palette.purple, bg = palette.bg1 },
  MiniStatuslineDiagHint    = { fg = palette.blue,   bg = palette.bg1 },
  MiniStatuslineFileinfo    = { fg = palette.grey2,  bg = palette.bg2 },
  MiniStatuslineLocation    = { fg = palette.grey2,  bg = palette.bg1 },
  -- stylua: ignore end


  -- stylua: ignore start
  MiniTablineCurrent         = { fg = palette.blue,  bg = palette.bg1 },
  MiniTablineHidden          = { fg = palette.grey1, bg = palette.bg1 },
  MiniTablineFill            = { fg = palette.bg2,   bg = palette.bg1 },
  MiniTablineModifiedCurrent = { fg = palette.blue,  bg = palette.bg1 },
  MiniTablineModifiedHidden  = { fg = palette.grey1, bg = palette.bg1 },
  MiniTablineModifiedVisible = { fg = palette.grey1, bg = palette.bg1 },
  MiniTablineTabpagesection  = { fg = palette.bg2,   bg = palette.bg1, bold = true },
  MiniTablineVisible         = { fg = palette.grey1, bg = palette.bg1 },
  -- stylua: ignore end

  -- stylua: ignore start
  MiniTestEmphasis = { fg = palette.none, bg = palette.none, bold = true },
  MiniTestFail = { fg = palette.red, bg = palette.none, bold = true },
  MiniTestPass = { fg = palette.green, bg = palette.none, bold = true },
  -- stylua: ignore end

  MiniTrailspace = { fg = palette.none, bg = palette.red },

  -- stylua: ignore start
  MiniClueBorder              = { link = "FloatBorder" },
  MiniClueDescGroup           = { link = "DiagnosticFloatingWarn" },
  MiniClueDescSingle          = { link = "NormalFloat" },
  MiniClueNextKey             = { link = "DiagnosticFloatingHint" },
  MiniClueNextKeyWithPostkeys = { link = "DiagnosticFloatingError" },
  MiniClueSeparator           = { link = "DiagnosticFloatingInfo" },
  MiniClueTitle               = { link = "FloatTitle" },
  -- stylua: ignore end

  MiniCompletionActiveParameter = { link = "LspSignatureActiveParameter" },

  MiniCursorword = { underline = true },
  MiniCursorwordCurrent = { link = "MiniCursorword" },

  MiniDepsChangeAdded = { link = "Added" },
  MiniDepsChangeRemoved = { link = "Removed" },
  MiniDepsHints = { link = "DiagnosticHint" },
  MiniDepsInfo = { link = "DiagnosticInfo" },
  MiniDepsMsgBreaking = { link = "DiagnosticWarn" },
  MiniDepsPlaceholder = { link = "Comment" },
  MiniDepsTitle = { link = "Title" },
  MiniDepsTitleError = { link = "DiffDelete" },
  MiniDepsTitleSame = { link = "DiffChange" },
  MiniDepsTitleUpdate = { link = "DiffAdd" },

  MiniDiffOverAdd = { link = "DiffAdd" },
  MiniDiffOverChange = { link = "DiffText" },
  MiniDiffOverContext = { link = "DiffChange" },
  MiniDiffOverDelete = { link = "DiffDelete" },
  MiniDiffSignAdd = { link = "Green" },
  MiniDiffSignChange = { link = "Blue" },
  MiniDiffSignDelete = { link = "Red" },

  MiniFilesBorder = { link = "FloatBorder" },
  MiniFilesBorderModified = { link = "DiagnosticFloatingWarn" },
  MiniFilesCursorLine = { link = "CursorLine" },
  MiniFilesDirectory = { link = "Directory" },
  MiniFilesNormal = { link = "NormalFloat" },
  MiniFilesTitle = { link = "FloatTitle" },

  MiniIndentscopeSymbol = { link = "Grey" },

  MiniJump = { link = "Search" },
  MiniJump2dDim = { link = "Comment" },

  MiniMapNormal = { link = "NormalFloat" },
  MiniMapSymbolCount = { link = "Special" },
  MiniMapSymbolLine = { link = "Title" },
  MiniMapSymbolView = { link = "Delimiter" },

  MiniNotifyBorder = { link = "FloatBorder" },
  MiniNotifyNormal = { link = "NormalFloat" },
  MiniNotifyTitle = { link = "FloatTitle" },

  MiniNotifyLspProgress = { fg = palette.blue, bg = palette.none, italic = true },
  MiniOperatorsExchangeFrom = { link = "IncSearch" },
  MiniPickBorder = { link = "FloatBorder" },
  MiniPickBorderBusy = { link = "DiagnosticFloatingWarn" },
  MiniPickBorderText = { link = "FloatTitle" },
  MiniPickHeader = { link = "DiagnosticFloatingHint" },
  MiniPickIconDirectory = { link = "Directory" },
  MiniPickIconFile = { link = "MiniPickNormal" },
  MiniPickMatchCurrent = { link = "CursorLine" },
  MiniPickMatchMarked = { link = "Visual" },
  MiniPickMatchRanges = { link = "DiagnosticFloatingHint" },
  MiniPickNormal = { link = "NormalFloat" },
  MiniPickPreviewLine = { link = "CursorLine" },
  MiniPickPreviewRegion = { link = "IncSearch" },
  MiniStarterFooter = { link = "Orange" },
  MiniStarterHeader = { link = "Yellow" },
  MiniStarterInactive = { link = "Comment" },
  MiniStarterItem = { link = "Normal" },
  MiniStarterItemBullet = { link = "Grey" },
  MiniStarterItemPrefix = { link = "Yellow" },
  MiniStarterQuery = { link = "Blue" },
  MiniStarterSection = { link = "Title" },
  MiniSurround = { link = "IncSearch" },

  -- nvim-neotest/neotest
  NeotestPassed = { link = "Green" },
  NeotestRunning = { link = "Yellow" },
  NeotestFailed = { link = "Red" },
  NeotestSkipped = { link = "Blue" },
  NeotestNamespace = { link = "Purple" },
  NeotestFocused = { link = "Yellow" },
  NeotestFile = { link = "Aqua" },
  NeotestDir = { link = "Directory" },
  NeotestBorder = { link = "Blue" },
  NeotestIndent = { link = "NonText" },
  NeotestExpandMarker = { fg = palette.bg5, bg = palette.none },
  NeotestAdapterName = { link = "Title" },
  NeotestWinSelect = { fg = palette.blue, bg = palette.none },
  NeotestMarked = { link = "Orange" },
  NeotestTarget = { link = "Red" },

  -- williamboman/mason.nvim
  MasonHeader = { fg = palette.bg0, bg = palette.green, bold = true },
  MasonHeaderSecondary = { fg = palette.bg0, bg = palette.orange, bold = true },
  MasonHighlight = { link = "Green" },
  MasonHighlightSecondary = { link = "Yellow" },
  MasonHighlightBlock = { fg = palette.bg0, bg = palette.aqua },
  MasonHighlightBlockBold = { fg = palette.bg0, bg = palette.aqua, bold = true },
  MasonHighlightBlockSecondary = { fg = palette.bg0, bg = palette.yellow },
  MasonHighlightBlockBoldSecondary = { fg = palette.bg0, bg = palette.yellow, bold = true },
  MasonMuted = { fg = palette.grey0, bg = palette.none },
  MasonMutedBlock = { fg = palette.bg0, bg = palette.grey0 },

  -- nullchilly/fsread.nvim
  FSPrefix = { fg = palette.fg, bg = palette.bg0, bold = true },
  FSSuffix = { fg = palette.grey1, bg = palette.none },

  -- sethen/line-number-change-mode.nvim
  -- stylua: ignore start
  NumberColumnModeVisual  = { fg = palette.red,    bg = palette.bg0 },
  NumberColumnModeInsert  = { fg = palette.fg,     bg = palette.bg0 },
  NumberColumnModeNormal  = { fg = palette.green,  bg = palette.bg0 },
  NumberColumnModeReplace = { fg = palette.orange, bg = palette.bg0 },
  -- stylua: ignore end

  LazyGitFloat = { fg = palette.fg, bg = palette.bg_dim },
  LazyGitBorder = { fg = palette.fg, bg = palette.bg_dim },
}

for group, opts in pairs(highlights) do
  vim.api.nvim_set_hl(0, group, opts)
end
